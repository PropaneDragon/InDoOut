<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InDoOut Core</name>
    </assembly>
    <members>
        <member name="T:InDoOut_Core.Basic.INamed">
            <summary>
            Represents something that can have a name.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.INamed.Name">
            <summary>
            Name of the entity.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Basic.INamedValue">
            <summary>
            Represents a basic value with an associated name.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Basic.INamedValue.ValueFrom``1(``0)">
            <summary>
            Sets the value from the given type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to set the value from.</typeparam>
            <param name="value">The type value to set the value to.</param>
            <returns>Whether the value was converted and set.</returns>
        </member>
        <member name="P:InDoOut_Core.Basic.INamedValue.Valid">
            <summary>
            Returns whether the variable has a valid name and value
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.INamedValue.RawValue">
            <summary>
            The value associated with this variable in string format.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Basic.INamedValue.ValueOrDefault(System.String)">
            <summary>
            Gets the value, or <paramref name="defaultValue"/> if null.
            </summary>
            <param name="defaultValue">The value to return on null.</param>
            <returns>The value, or default if null.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.INamedValue.ValueAs``1(``0)">
            <summary>
            Converts the <see cref="P:InDoOut_Core.Basic.INamedValue.RawValue"/> to the specified type <typeparamref name="T"/>. Failing that it will
            fall back to <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="defaultValue">The default value to output in case of a conversion failure.</param>
            <returns>The <see cref="P:InDoOut_Core.Basic.INamedValue.RawValue"/> as the requested type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:InDoOut_Core.Basic.IStored">
            <summary>
            Represents stored data. Each entity has a unique <see cref="T:System.Guid"/>
            to identify it when saving and loading.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.IStored.Id">
            <summary>
            The unique ID of this entity.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Basic.NamedValue">
            <summary>
            A basic value with an associated name, along with some conversion utilities.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.NamedValue.Valid">
            <summary>
            Whether it has a valid name and value.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.NamedValue.Name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.NamedValue.RawValue">
            <summary>
            The value associated with the name.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Basic.NamedValue.ValueOrDefault(System.String)">
            <summary>
            Returns <see cref="P:InDoOut_Core.Basic.NamedValue.RawValue"/>, or <paramref name="defaultValue"/> if null.
            </summary>
            <param name="defaultValue">The value to return if the stored value is null.</param>
            <returns>The value, or <paramref name="defaultValue"/> if null.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.NamedValue.ValueAs``1(``0)">
            <summary>
            Converts the <see cref="P:InDoOut_Core.Basic.NamedValue.RawValue"/> to the given type <typeparamref name="T"/>. If this conversion
            fails, <paramref name="defaultValue"/> is returned instead.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="defaultValue">The value to return if the conversion fails.</param>
            <returns>The converted value or <paramref name="defaultValue"/> if conversion fails.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.NamedValue.ValueFrom``1(``0)">
            <summary>
            Sets the value from the given <typeparamref name="T"/> value.
            </summary>
            <typeparam name="T">The type of the value being given.</typeparam>
            <param name="value">The value to be set.</param>
            <returns>Whether the value was converted and set.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.NamedValue.ConvertFromString``1(System.String)">
            <summary>
            Converts a value from a string to the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert to the type <typeparamref name="T"/>.</param>
            <returns>The value of the string as the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.NamedValue.ConvertToString``1(``0)">
            <summary>
            Converts a value of type <typeparamref name="T"/> to a string.
            </summary>
            <typeparam name="T">The type to convert from.</typeparam>
            <param name="value">The value of the type to convert to a string.</param>
            <returns>A string representation of the value given.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.Entity">
            <summary>
            A base, saveable entity. The root of all other entities.
            </summary>
            <seealso cref="T:InDoOut_Core.Entities.Core.IEntity"/>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.Entity.Id">
            <summary>
            The unique ID of this entity.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.IConnectable">
            <summary>
            Represents an object that can be connected to an entity.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.IConnectable.CanAcceptConnection(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Check whether or not a <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can be connected to this
            object.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether or not the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can be connected.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.IConnectable`1">
            <summary>
            Represents an object that can be connected to an entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.IConnectable`1.Connections">
            <summary>
            The connections this object has.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.IEntity">
            <summary>
            Represents a base entity. All entities are <see cref="T:InDoOut_Core.Basic.IStored"/>, so can
            be saved.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.INamedEntity">
            <summary>
            Represents an <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> that can have a name.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.InteractiveEntity`2">
            <summary>
            An entity that can be connected to and triggered by another <see cref="T:InDoOut_Core.Entities.Core.IEntity"/>.
            </summary>
            <typeparam name="ConnectsToType">The <see cref="T:InDoOut_Core.Entities.Core.ITriggerable"/> that this entity can connect to.</typeparam>
            <typeparam name="ConnectsFromType">The <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> that this entity can accept connections from.</typeparam>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.InteractiveEntity`2.Running">
            <summary>
            The current running state of this entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.InteractiveEntity`2.Connections">
            <summary>
            The connections that this entity has.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.Trigger(`1)">
            <summary>
            Triggers this entity from another entity.
            </summary>
            <param name="triggeredBy">The entity that triggered this one.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.CanBeTriggered(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Checks whether a given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can trigger this.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can trigger this.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.CanAcceptConnection(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Checks whether a given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can connect to this.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can trigger this.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.AddConnection(`0)">
            <summary>
            Adds a connection to the entity.
            </summary>
            <param name="connection">The connection to add.</param>
            <returns>Whether the connection was added.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.AddConnections(`0[])">
            <summary>
            Adds numerous connections to the entity.
            </summary>
            <param name="connections">The connections to add.</param>
            <returns>Whether all connections were added.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.RemoveConnection(`0)">
            <summary>
            Removes a connection from the entity.
            </summary>
            <param name="connection">The connection to remove.</param>
            <returns>Whether the connection was found and removed.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.RemoveConnections(`0[])">
            <summary>
            Removes numerous connections from the entity.
            </summary>
            <param name="connections">The connectsions to remove.</param>
            <returns>Whether all connections were removed.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.RemoveAllConnections">
            <summary>
            Removes all connections from the entity.
            </summary>
            <returns>Whether all connections were removed.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.SetConnection(`0[])">
            <summary>
            Sets the current connections to the given connections. This removes
            all current connections.
            </summary>
            <param name="connections">The connections to set.</param>
            <returns>Whether the connections were set.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.Process(`1)">
            <summary>
            Begins processing after being triggered by a connected entity.
            </summary>
            <param name="triggeredBy">The entity that triggered this.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.ITriggerable">
            <summary>
            Represents an entity that can be triggered by another entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.ITriggerable.Running">
            <summary>
            The current running state of the object.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.ITriggerable.CanBeTriggered(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Check whether or not the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can trigger this object.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether this object can be triggered by the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/>.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.ITriggerable`1">
            <summary>
            Represents an entity that can be triggered by another entity.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.ITriggerable`1.Trigger(`0)">
            <summary>
            Triggers this entity using the given <typeparamref name="TriggerType"/>
            </summary>
            <param name="triggeredBy">The entity to trigger this object.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Function">
            <summary>
            A self contained block that can do processing independently of any other function. These have inputs and
            outputs, where the inputs trigger the function which then trigger an output.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.StopRequested">
            <summary>
            Stop has been requested on the task, and it should be terminated as soon
            as possible.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.State">
            <summary>
            The current function state. See <see cref="P:InDoOut_Core.Entities.Functions.Function.State"/> for more
            info on the states.
            </summary>
            <seealso cref="P:InDoOut_Core.Entities.Functions.Function.State"/>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.VariableStore">
            <summary>
            The current variable store.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Inputs">
            <summary>
            The inputs that belong to this function.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Properties">
            <summary>
            The properties that this function accepts.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Results">
            <summary>
            The results that this function gives.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Outputs">
            <summary>
            The outputs that belong to this function.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.SafeName">
            <summary>
            An exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.Function.Name"/>
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.SafeDescription">
            <summary>
            An exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.Function.Description"/>
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.SafeGroup">
            <summary>
            An exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.Function.Group"/>
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.SafeKeywords">
            <summary>
            An exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.Function.Keywords"/>
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Description">
            <summary>
            The description of what the function does.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Name">
            <summary>
            The name of the function.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Group">
            <summary>
            The group this function belongs to. This is to allow for easier categorisation
            of functions.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Keywords">
            <summary>
            Keywords associated with this function. This allows for similar words to match
            this function when being searched for.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.#ctor">
            <summary>
            Creates a basic function.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.PolitelyStop">
            <summary>
            Makes a request for the function to stop when it's safe to do so, for example
            on filesystem actions. If there's nothing in place, the underlying code doesn't
            have to listen to this request, and provisions may not be in place to stop it.
            For any code that listens for <see cref="P:InDoOut_Core.Entities.Functions.Function.StopRequested"/> they will stop when
            this method is called.
            </summary>
            <seealso cref="P:InDoOut_Core.Entities.Functions.Function.StopRequested"/>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.CreateInput(System.String)">
            <summary>
            Creates an input for this function.
            </summary>
            <param name="name">The name of the input.</param>
            <returns>The input that was created.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.CreateOutput(System.String,InDoOut_Core.Entities.Functions.OutputType)">
            <summary>
            Creates an output for this function.
            </summary>
            <param name="outputType">The type of output to create. Different types return different classes.</param>
            <param name="name">The name of the output.</param>
            <returns>The output that was created.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.CreateOutput(InDoOut_Core.Entities.Functions.OutputType,System.String)">
            <summary>
            Creates an output for this function.
            </summary>
            <param name="name">The name of the output.</param>
            <param name="outputType">The type of output to create. Different types return different classes.</param>
            <returns>The output that was created.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.AddProperty``1(``0)">
            <summary>
            Adds a property to the function and returns the same property as a result. This allows it to be created and added
            on the same line.
            </summary>
            <typeparam name="T">The type of <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/> to add.</typeparam>
            <param name="property">The property to add.</param>
            <returns>The given <paramref name="property"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.AddResult``1(``0)">
            <summary>
            Adds a result to the function and returns the same result as a result. This allows it to be created and added
            on the same line.
            </summary>
            <typeparam name="T">The type of <see cref="T:InDoOut_Core.Entities.Functions.IResult"/> to add.</typeparam>
            <param name="result">The property to add.</param>
            <returns>The given <paramref name="result"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.BuildInput(System.String)">
            <summary>
            A builder for creating an <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> entity
            when requested.
            </summary>
            <param name="name">The name of the input.</param>
            <returns>A new input for a given name.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.BuildOutput(System.String,InDoOut_Core.Entities.Functions.OutputType)">
            <summary>
            A builder for creating an <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> entity
            when requested.
            </summary>
            <param name="name">The name of the output.</param>
            <param name="outputType">The type of output to create.</param>
            <returns>A new output for a given name.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.Process(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Start processing the function code. Sets up all states.
            </summary>
            <param name="triggeredBy">The entity that triggered this.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.Started(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Start the main code, given a <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>. This will return the <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
            that should be triggered at the end of processing.
            </summary>
            <param name="triggeredBy">The entity that triggered this.</param>
            <returns>An <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> that should be triggered after this code.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.State">
            <summary>
            The current operating state of a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Unknown">
            <summary>
            The function is in an unknown state and hasn't been initialised properly.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Placing">
            <summary>
            The function is being placed from within an editor.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Disabled">
            <summary>
            The function is currently disabled and will not trigger.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Waiting">
            <summary>
            The function is currently waiting to be triggered.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Processing">
            <summary>
            The function has been triggered and is currently processing.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Stopping">
            <summary>
            The function has been requested to stop and is stopping.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.InError">
            <summary>
            The entity has failed in some way and is in an error state.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IFunction">
            <summary>
            Represents a function block containing <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>s and 
            <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>s. This can be triggered with a <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>,
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.State">
            <summary>
            The current state of the function. See <see cref="P:InDoOut_Core.Entities.Functions.IFunction.State"/> for more
            details on the states that this function can enter.
            </summary>
            <seealso cref="P:InDoOut_Core.Entities.Functions.IFunction.State"/>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.StopRequested">
            <summary>
            Stop has been requested on the function, and it should be terminated as soon
            as possible.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.SafeName">
            <summary>
            A thread safe, exception safe version of <see cref="P:InDoOut_Core.Basic.INamed.Name"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.SafeDescription">
            <summary>
            A thread safe, exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.IFunction.Description"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.SafeGroup">
            <summary>
            A thread safe, exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.IFunction.Group"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.SafeKeywords">
            <summary>
            A thread safe, exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.IFunction.Keywords"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Description">
            <summary>
            The description of what the function does. This will be how it is seen by the user.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Group">
            <summary>
            What group this function belongs to. This will allow for it to be categorised into
            similar groups so they can be filtered easily.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Keywords">
            <summary>
            Keywords associated with this function. This allows for it to be searched for by similar
            names.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Inputs">
            <summary>
            All inputs that this function has.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Outputs">
            <summary>
            All outputs that this function has.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Properties">
            <summary>
            All properties that this function accepts.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Results">
            <summary>
            All results that this function gives.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.VariableStore">
            <summary>
            A shared variable store between multiple functions.
            </summary>
            <seealso cref="T:InDoOut_Core.Variables.IVariableStore"/>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IFunction.PolitelyStop">
            <summary>
            Politely asks for the function to be stopped, and waits for the user code to
            listen to the request. If the user code has no listener, it will continue
            regardless, and there's nothing that can be done about this.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IInput">
            <summary>
            Represents an input that is triggered by
            any <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IInput.Parent">
            <summary>
            The parent of this input.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Input">
            <summary>
            Inputs are triggered by <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>s. These intputs are simple connections for
            <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s which can trigger the code within them. The <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> may
            perform different actions based on the type of input that was triggered.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Input.Name">
            <summary>
            The name of this input.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Input.Parent">
            <summary>
            The parent this input belongs to.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Input.#ctor(InDoOut_Core.Entities.Functions.IFunction,System.String)">
            <summary>
            Creates a generic input with a parent.
            </summary>
            <param name="parent">The <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> this input belongs to.</param>
            <param name="name">The name of this input.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Input.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Input.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Input.Process(InDoOut_Core.Entities.Functions.IOutput)">
            <summary>
            Begins processing this input. This calls the <see cref="P:InDoOut_Core.Entities.Functions.Input.Parent"/> it is connected to.
            </summary>
            <param name="triggeredBy">The <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> that triggered this input.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.OutputType">
            <summary>
            The type of output.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.OutputType.Positive">
            <summary>
            An output from a good result.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.OutputType.Negative">
            <summary>
            An output from a bad result.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.OutputType.Neutral">
            <summary>
            An output from neither a good nor bad result.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IOutput">
            <summary>
            Represents an output that can be connected to any
            <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> entity and is triggered by a
            <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> entity.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IOutput.Connect(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Connect this output to an <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>.
            </summary>
            <param name="input">The <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> to connect to.</param>
            <returns>Whether a connection was made.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IOutput.Disconnect(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Disconnect this output from an <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>.
            </summary>
            <param name="input">The <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> to disconnect from.</param>
            <returns>Whether the input was disconnected.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IOutputNegative">
            <summary>
            Represents a negative output from a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>. See <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
            for more generalised info.
            </summary>
            <seealso cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IOutputNeutral">
            <summary>
            Represents a neutral output from a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>.
            Neutral outputs are neither positive or negative.
            See <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> for more generalised info.
            </summary>
            <seealso cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IOutputPositive">
            <summary>
            Represents a positive output from a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>. See <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
            for more generalised info.
            </summary>
            <seealso cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IProperty">
            <summary>
            Represents a property, which are values that can be applied to
            <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s to alter their behaviour, or provide
            required input values.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.Required">
            <summary>
            Whether or not this property is required for the function to work.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.Description">
            <summary>
            The description of what this property does.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.SafeDescription">
            <summary>
            A safer way of getting <see cref="P:InDoOut_Core.Entities.Functions.IProperty.Description"/> without exceptions.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.RawComputedValue">
            <summary>
            Computes the value based off of whether <see cref="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable"/> is set or
            not. If it is set, it will use the <see cref="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable"/> for the value,
            or otherwise it just uses <see cref="P:InDoOut_Core.Basic.INamedValue.RawValue"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable">
            <summary>
            A variable that is associated with this property. This automatically sets
            the value of the property to that of the variable when the value is requested.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IProperty`1">
            <summary>
            Represents a specific type of property that has a value automatically
            converted to and from type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to and from.</typeparam>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty`1.Value">
            <summary>
            The value of this property.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty`1.ComputedValue">
            <summary>
            Computes the value based off of whether <see cref="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable"/> is set or
            not. If it is set, it will use the <see cref="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable"/> for the value,
            or otherwise it just uses <see cref="P:InDoOut_Core.Entities.Functions.IProperty`1.Value"/>.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IResult">
            <summary>
            Represents a result from a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>. Results are values given when the function has
            completed, and can be used to set <see cref="T:InDoOut_Core.Variables.IVariable"/> values which can then be
            used to set <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/> values on other functions.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IResult.IsSet">
            <summary>
            Whether the result has a value set on it or not.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IResult.Description">
            <summary>
            The description of what this result represents.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IResult.VariableName">
            <summary>
            The name of the variable that will be set when the associated <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>
            completes.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IResult.SetVariable(InDoOut_Core.Variables.IVariableStore)">
            <summary>
            Sets a variable with a name of the given <see cref="P:InDoOut_Core.Entities.Functions.IResult.VariableName"/> and value of
            <see cref="P:InDoOut_Core.Basic.INamedValue.RawValue"/> inside the given <paramref name="variableStore"/>.
            </summary>
            <param name="variableStore">A variable store to create/update the variable.</param>
            <returns>Whether the variable was set or not.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IResult.SetVariable(InDoOut_Core.Variables.IVariable)">
            <summary>
            Sets a variable's value directly from the <see cref="P:InDoOut_Core.Basic.INamedValue.RawValue"/> without
            accounting for the variable name. It is recommended to use <see cref="M:InDoOut_Core.Entities.Functions.IResult.SetVariable(InDoOut_Core.Variables.IVariableStore)"/>
            instead, as it takes care of creating/updating the correct variable.
            </summary>
            <param name="variable">The variable to set.</param>
            <returns>Whether the variable was set or not.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IStartFunction">
            <summary>
            Represents a function that is called automatically when the <see cref="T:InDoOut_Core.Entities.Programs.IProgram"/> is started.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Output">
            <summary>
            Outputs are triggered by <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s. These outputs are simple connections for
            <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>s which then trigger their connected entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Output.Name">
            <summary>
            The name of this output.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.#ctor(System.String)">
            <summary>
            Creates a basic output with a name.
            </summary>
            <param name="name">The name to give the output.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.Connect(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Connects this output to a given <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>.
            </summary>
            <param name="input">The <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> to connect to.</param>
            <returns>Whether the connection was made.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.Disconnect(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Disconnects this output from a given <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>.
            </summary>
            <param name="input">The <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> to disconnect from.</param>
            <returns>Whether the connection was disconnected.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.Process(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Begins processing this output. This calls all the <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>s it is connected to.
            </summary>
            <param name="triggeredBy">The <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> that triggered this output.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.OutputNegative">
            <summary>
            A negative output. These are generally used on bad results.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.OutputNegative.#ctor(System.String)">
            <summary>
            Creates a negative output. Negative outputs should be used where the result
            is bad.
            </summary>
            <param name="name">The name of the output.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.OutputNeutral">
            <summary>
            A neutral output. These are used on neither good nor bad results.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.OutputNeutral.#ctor(System.String)">
            <summary>
            Creates a neutral output. Neutral outputs should be used where the result
            is neither good nor bad.
            </summary>
            <param name="name">The name of the output.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.OutputPositive">
            <summary>
            A positive output. These are generally used on good results.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.OutputPositive.#ctor(System.String)">
            <summary>
            Creates a positive output. Positive outputs should be used where the result
            is good.
            </summary>
            <param name="name">The name of the output.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Property`1">
            <summary>
            Properties are values that change how a <see cref="T:InDoOut_Core.Entities.Functions.Function"/> operates, or passes information into a
            function to be calculated. These can be set by the user, or automatically set by the <see cref="P:InDoOut_Core.Entities.Functions.Property`1.AssociatedVariable"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.SafeDescription">
            <summary>
            A safe way of getting the <see cref="P:InDoOut_Core.Entities.Functions.Property`1.Description"/> of a property without exceptions.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.AssociatedVariable">
            <summary>
            The variable associated with this property. If set to anything other than null it will use the
            value of the variable as the <see cref="P:InDoOut_Core.Entities.Functions.Property`1.RawComputedValue"/>, rather than using <see cref="P:InDoOut_Core.Basic.NamedValue.RawValue"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.RawComputedValue">
            <summary>
            The full computed value of the property. If <see cref="P:InDoOut_Core.Entities.Functions.Property`1.AssociatedVariable"/> is set it will use the
            value assigned to the variable, rather than <see cref="P:InDoOut_Core.Basic.NamedValue.RawValue"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.Required">
            <summary>
            Whether or not this is a required value for the function to operate.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.Description">
            <summary>
            The description of what this property does.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.Value">
            <summary>
            The value of this property, as the given type <typeparamref name="T"/>. This is similar to <see cref="P:InDoOut_Core.Basic.NamedValue.RawValue"/>,
            but is automatically converted to the type of this property.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.ComputedValue">
            <summary>
            The full computed value of the property as type <typeparamref name="T"/>. If <see cref="P:InDoOut_Core.Entities.Functions.Property`1.AssociatedVariable"/> is set it will use the
            value assigned to the variable, rather than <see cref="P:InDoOut_Core.Entities.Functions.Property`1.Value"/>.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Property`1.#ctor(System.String,System.String,System.Boolean,`0)">
            <summary>
            Creates a basic property with a name, description and optional requirement and initial value.
            </summary>
            <param name="name">The name of this property. This is visible to the user.</param>
            <param name="description">The description of this property. This is visible to the user.</param>
            <param name="required">Whether or not this property is required for the function to run.</param>
            <param name="initialValue">The initial value of the property.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Result">
            <summary>
            Results are values that are set when a <see cref="T:InDoOut_Core.Entities.Functions.Function"/> is run. These values
            can be named and will set a <see cref="T:InDoOut_Core.Variables.IVariable"/> of that name when
            the function is finished. Those values can then be used on <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/>
            values.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Result.IsSet">
            <summary>
            Whether this result contains a valid value, in order to set a corrisponding
            <see cref="T:InDoOut_Core.Variables.IVariable"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Result.Description">
            <summary>
            A description of what this result represents.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Result.VariableName">
            <summary>
            The name of the variable that will be set when the associated <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>
            completes.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a result with a name, description and optional defaultValue.
            </summary>
            <param name="name">The name of this result. This is visible to the user.</param>
            <param name="description">The description of this result. This is visible to the user.</param>
            <param name="defaultValue">The default value to set on this result.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.SetVariable(InDoOut_Core.Variables.IVariableStore)">
            <summary>
            Sets a variable with a name of the given <see cref="P:InDoOut_Core.Entities.Functions.Result.VariableName"/> and value of
            <see cref="P:InDoOut_Core.Basic.NamedValue.RawValue"/> inside the given <paramref name="variableStore"/>.
            </summary>
            <param name="variableStore">A variable store to create/update the variable.</param>
            <returns>Whether the variable was set or not.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.SetVariable(InDoOut_Core.Variables.IVariable)">
            <summary>
            Sets a variable's value directly from the <see cref="P:InDoOut_Core.Basic.NamedValue.RawValue"/> without
            accounting for the variable name. It is recommended to use <see cref="M:InDoOut_Core.Entities.Functions.Result.SetVariable(InDoOut_Core.Variables.IVariableStore)"/>
            instead, as it takes care of creating/updating the correct variable.
            </summary>
            <param name="variable">The variable to set.</param>
            <returns>Whether the variable was set or not.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.StartFunction">
            <summary>
            A self contained block that can do processing independently of any other function. <see cref="T:InDoOut_Core.Entities.Functions.StartFunction"/>s are
            slightly different to <see cref="T:InDoOut_Core.Entities.Functions.Function"/>s, where instead of only being able to be triggered by a given <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>,
            they are triggered automatically at the start of a <see cref="T:InDoOut_Core.Entities.Programs.IProgram"/>.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Programs.IProgram">
            <summary>
            Represents a group of self contained <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s that have
            interactivity between each other.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.IProgram.Functions">
            <summary>
            All <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s that are contained within this program.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.IProgram.StartFunctions">
            <summary>
            All <see cref="T:InDoOut_Core.Entities.Functions.IStartFunction"/>s that are available to be started when the 
            program is started.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.IProgram.VariableStore">
            <summary>
            The variable store for this program. This is where <see cref="T:InDoOut_Core.Variables.IVariable"/>s are
            held for functions.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.IProgram.AddFunction(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Add a function to the program.
            </summary>
            <param name="function">The function to add to the program.</param>
            <returns>Whether the function was added.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Programs.Program">
            <summary>
            A collection of <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> entities linked together and started through the
            <see cref="P:InDoOut_Core.Entities.Programs.Program.StartFunctions"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.Functions">
            <summary>
            All functions within this program.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.StartFunctions">
            <summary>
            All <see cref="T:InDoOut_Core.Entities.Functions.IStartFunction"/>s within this program.
            These are triggered when the program is triggered, and the program will not
            start without at least one.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.Running">
            <summary>
            Whether any of the functions within this program are running.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.Name">
            <summary>
            The name of this program.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.Id">
            <summary>
            The unique ID for this program.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.VariableStore">
            <summary>
            The current variable store for all program variables.
            </summary>
            <seealso cref="P:InDoOut_Core.Entities.Programs.Program.VariableStore"/>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.AddFunction(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Add a function to the program.
            </summary>
            <param name="function">The function to add.</param>
            <returns>Whether the function was added.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.CanBeTriggered(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Whether this program can be triggered by the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/>.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether this program can be triggered by the entity.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.Trigger(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Trigger this program. This will start all available <see cref="P:InDoOut_Core.Entities.Programs.Program.StartFunctions"/>.
            </summary>
            <param name="triggeredBy">The <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> that triggered this.</param>
        </member>
        <member name="T:InDoOut_Core.Functions.FunctionBuilder">
            <summary>
            A builder specifically for building classes and subclasses of <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Functions.IFunctionBuilder">
            <summary>
            Represents a builder specifically for building <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> classes.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Instancing.IInstanceBuilder`1">
            <summary>
            Represents a builder that can generate instances of classes of type <typeparamref name="T"/>.
            It can build all classes that can inherit from or are <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The base class to build from.</typeparam>
        </member>
        <member name="M:InDoOut_Core.Instancing.IInstanceBuilder`1.BuildInstance(System.Type)">
            <summary>
            Builds an instance of the given type. The type has to be inherited from <typeparamref name="T"/>.
            </summary>
            <param name="type">The type to build.</param>
            <returns>The requested type <paramref name="type"/> as type <typeparamref name="T"/>, or null if it has failed.</returns>
        </member>
        <member name="M:InDoOut_Core.Instancing.IInstanceBuilder`1.BuildInstance``1">
            <summary>
            Builds an instance of the given type <typeparamref name="InstanceOf"/>. The type has to be inherited from <typeparamref name="T"/>.
            </summary>
            <typeparam name="InstanceOf">The type to build.</typeparam>
            <returns>The requested type <typeparamref name="InstanceOf"/> as <typeparamref name="T"/>, or null if it has failed.</returns>
        </member>
        <member name="T:InDoOut_Core.Instancing.InstanceBuilder`1">
            <summary>
            Builds instances of type <typeparamref name="T"/> and subclasses.
            </summary>
            <typeparam name="T">The base class to build from.</typeparam>
        </member>
        <member name="M:InDoOut_Core.Instancing.InstanceBuilder`1.BuildInstance(System.Type)">
            <summary>
            Builds an instance of the given type. The type has to be inherited from <typeparamref name="T"/>.
            </summary>
            <param name="type">The type to build.</param>
            <returns>The requested type <paramref name="type"/> as type <typeparamref name="T"/>, or null if it has failed.</returns>
        </member>
        <member name="M:InDoOut_Core.Instancing.InstanceBuilder`1.BuildInstance``1">
            <summary>
            Builds an instance of the given type <typeparamref name="InstanceOf"/>. The type has to be inherited from <typeparamref name="T"/>.
            </summary>
            <typeparam name="InstanceOf">The type to build.</typeparam>
            <returns>The requested type <typeparamref name="InstanceOf"/> as <typeparamref name="T"/>, or null if it has failed.</returns>
        </member>
        <member name="T:InDoOut_Core.Threading.Safety.TryGet">
            <summary>
            A collection of methods to safely get values.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Threading.Safety.TryGet.ValueOrDefault``1(System.Func{``0},``0)">
            <summary>
            Gets a value from a function result unless an exception is thrown, where it returns
            a default value.
            </summary>
            <typeparam name="T">The value type that is returned.</typeparam>
            <param name="function">The function to process.</param>
            <param name="defaultValue">The default value to return on failure.</param>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Threading.Safety.TryGet.ExecuteOrFail(System.Action)">
            <summary>
            Attempts to execute a given <see cref="T:System.Action"/> <paramref name="action"/>. If it succeeds
            without throwing an error it returns true, otherwise false.
            </summary>
            <param name="action">The action to run.</param>
            <returns>Whether the action succeded without exception.</returns>
        </member>
        <member name="T:InDoOut_Core.Variables.IVariable">
            <summary>
            Represents an individual variable. Variables have names and values which store state
            over multiple functions.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Variables.IVariableStore">
            <summary>
            Represents global storage for <see cref="T:InDoOut_Core.Variables.IVariable"/>s.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.VariableExists(System.String)">
            <summary>
            Returns whether a variable name <paramref name="name"/> exists as a
            variable in this storage.
            </summary>
            <param name="name">The name of the variable to check.</param>
            <returns>Whether the given variable name exists.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.SetVariable(System.String,System.String)">
            <summary>
            Sets or creates a variable from the given name <paramref name="name"/> and sets it to the
            value <paramref name="value"/>.
            </summary>
            <param name="name">The name of the variable to set.</param>
            <param name="value">The value to set the variable to.</param>
            <returns>Whether the variable was set successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.SetVariable(InDoOut_Core.Variables.IVariable)">
            <summary>
            Sets or creates a variable from the given <paramref name="variable"/>.
            </summary>
            <param name="variable">The variable to set.</param>
            <returns>Whether the variable was set successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.GetVariableValue(System.String,System.String)">
            <summary>
            Returns the string value of the variable name <paramref name="name"/>, and returns
            <paramref name="defaultValue"/> if it doesn't exist.
            </summary>
            <param name="name">The name of the variable to get the value for.</param>
            <param name="defaultValue">The value to return if the variable doesn't exist.</param>
            <returns>The string value of the variable.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.GetVariable(System.String)">
            <summary>
            Returns an <see cref="T:InDoOut_Core.Variables.IVariable"/> that matches the name given by <paramref name="name"/>.
            </summary>
            <param name="name">The name of the variable to find.</param>
            <returns>The variable found from <paramref name="name"/>, or null if not found.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.GetVariableValueAs``1(System.String,``0)">
            <summary>
            Returns a converted value of type <typeparamref name="T"/> in the variable found from <paramref name="name"/>.
            If that conversion fails it returns <paramref name="defaultValue"/> instead.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="name">The name of the variable to find.</param>
            <param name="defaultValue">The value to return on failure.</param>
            <returns>The converted value of the variable, or <paramref name="defaultValue"/> on failure.</returns>
        </member>
        <member name="T:InDoOut_Core.Variables.Variable">
            <summary>
            An individual variable that holds a value and a name.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Variables.Variable.#ctor(System.String,System.String)">
            <summary>
            Creates a new variable with the given name <paramref name="name"/>.
            </summary>
            <param name="name">The name to associate with the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="M:InDoOut_Core.Variables.Variable.Equals(System.Object,System.Boolean)">
            <summary>
            Checks equality on the variable. Variables are case insensitive.
            </summary>
            <param name="obj">The object to compare againt.</param>
            <param name="includeValues">Whether or not to include the value of the variable in the comparison.</param>
            <returns>Whether the variable is equal to the given object <paramref name="obj"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.Variable.Equals(System.Object)">
            <summary>
            Checks equality on the variable. Variables are case insensitive.
            </summary>
            <param name="obj">The object to compare againt.</param>
            <returns>Whether the variable is equal to the given object <paramref name="obj"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.Variable.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>The hash code for this variable.</returns>
        </member>
        <member name="T:InDoOut_Core.Variables.VariableStore">
            <summary>
            Storage for multiple <see cref="T:InDoOut_Core.Variables.IVariable"/>s. Allows for searching through and returning values
            of variables within.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Variables.VariableStore.Variables">
            <summary>
            All variables currently in storage.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.GetVariable(System.String)">
            <summary>
            Returns an <see cref="T:InDoOut_Core.Variables.IVariable"/> that matches the name given by <paramref name="name"/>.
            </summary>
            <param name="name">The name of the variable to find.</param>
            <returns>The variable found from <paramref name="name"/>, or null if not found.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.GetVariableValue(System.String,System.String)">
            <summary>
            Returns the string value of the variable name <paramref name="name"/>, and returns
            <paramref name="defaultValue"/> if it doesn't exist.
            </summary>
            <param name="name">The name of the variable to get the value for.</param>
            <param name="defaultValue">The value to return if the variable doesn't exist.</param>
            <returns>The string value of the variable.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.GetVariableValueAs``1(System.String,``0)">
            <summary>
            Returns a converted value of type <typeparamref name="T"/> in the variable found from <paramref name="name"/>.
            If that conversion fails it returns <paramref name="defaultValue"/> instead.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="name">The name of the variable to find.</param>
            <param name="defaultValue">The value to return on failure.</param>
            <returns>The converted value of the variable, or <paramref name="defaultValue"/> on failure.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.SetVariable(System.String,System.String)">
            <summary>
            Sets or creates a variable from the given name <paramref name="name"/> and sets it to the
            value <paramref name="value"/>.
            </summary>
            <param name="name">The name of the variable to set.</param>
            <param name="value">The value to set the variable to.</param>
            <returns>Whether the variable was set successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.SetVariable(InDoOut_Core.Variables.IVariable)">
            <summary>
            Sets or creates a variable from the given <paramref name="variable"/>.
            </summary>
            <param name="variable">The variable to set.</param>
            <returns>Whether the variable was set successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.VariableExists(System.String)">
            <summary>
            Returns whether a variable name <paramref name="name"/> exists as a
            variable in this storage.
            </summary>
            <param name="name">The name of the variable to check.</param>
            <returns>Whether the given variable name exists.</returns>
        </member>
    </members>
</doc>
