<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InDoOut Core</name>
    </assembly>
    <members>
        <member name="T:InDoOut_Core.Basic.INamed">
            <summary>
            Represents something that can have a name.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.INamed.Name">
            <summary>
            Name of the entity.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Basic.IStored">
            <summary>
            Represents stored data. Each entity has a unique <see cref="T:System.Guid"/>
            to identify it when saving and loading.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.IStored.Id">
            <summary>
            The unique ID of this entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.IStored.Metadata">
            <summary>
            Metadata associated with the stored data.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Basic.IValue">
            <summary>
            Represents a basic value as well as conversion utilities.
            </summary>
        </member>
        <member name="E:InDoOut_Core.Basic.IValue.OnValueChanged">
            <summary>
            An event that gets fired when the value changes.
            <para/>
            Note: This may not be thread safe, and you should take precautions to ensure your
            code can handle multiple threads sending this event at once.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Basic.IValue.ValueFrom``1(``0)">
            <summary>
            Sets the value from the given type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to set the value from.</typeparam>
            <param name="value">The type value to set the value to.</param>
            <returns>Whether the value was converted and set.</returns>
        </member>
        <member name="P:InDoOut_Core.Basic.IValue.ValidValue">
            <summary>
            Returns whether the value currently stored is valid.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.IValue.RawValue">
            <summary>
            The stored value associated with this value in string format.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Basic.IValue.ValueOrDefault(System.String)">
            <summary>
            Gets the value, or <paramref name="defaultValue"/> if null.
            </summary>
            <param name="defaultValue">The value to return on null.</param>
            <returns>The value, or default if null.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.IValue.ValueAs``1(``0)">
            <summary>
            Converts the <see cref="P:InDoOut_Core.Basic.IValue.RawValue"/> to the specified type <typeparamref name="T"/>. Failing that it will
            fall back to <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="defaultValue">The default value to output in case of a conversion failure.</param>
            <returns>The <see cref="P:InDoOut_Core.Basic.IValue.RawValue"/> as the requested type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:InDoOut_Core.Basic.Value">
            <summary>
            A basic value, along with some conversion utilities.
            </summary>
        </member>
        <member name="E:InDoOut_Core.Basic.Value.OnValueChanged">
            <summary>
            An event that gets fired when the value changes.
            <para/>
            Note: Not thread safe. This spawns a new thread every time the value changes.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.Value.ValidValue">
            <summary>
            Whether it has a valid name and value.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.Value.RawValue">
            <summary>
            The value associated with the name.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Basic.Value.ValueOrDefault(System.String)">
            <summary>
            Returns <see cref="P:InDoOut_Core.Basic.Value.RawValue"/>, or <paramref name="defaultValue"/> if null.
            </summary>
            <param name="defaultValue">The value to return if the stored value is null.</param>
            <returns>The value, or <paramref name="defaultValue"/> if null.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.Value.ValueAs``1(``0)">
            <summary>
            Converts the <see cref="P:InDoOut_Core.Basic.Value.RawValue"/> to the given type <typeparamref name="T"/>. If this conversion
            fails, <paramref name="defaultValue"/> is returned instead.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="defaultValue">The value to return if the conversion fails.</param>
            <returns>The converted value or <paramref name="defaultValue"/> if conversion fails.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.Value.ValueFrom``1(``0)">
            <summary>
            Sets the value from the given <typeparamref name="T"/> value.
            </summary>
            <typeparam name="T">The type of the value being given.</typeparam>
            <param name="value">The value to be set.</param>
            <returns>Whether the value was converted and set.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.Value.ConvertFromString``1(System.String)">
            <summary>
            Converts a value from a string to the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert to the type <typeparamref name="T"/>.</param>
            <returns>The value of the string as the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.Value.ConvertToString``1(``0)">
            <summary>
            Converts a value of type <typeparamref name="T"/> to a string.
            </summary>
            <typeparam name="T">The type to convert from.</typeparam>
            <param name="value">The value of the type to convert to a string.</param>
            <returns>A string representation of the value given.</returns>
        </member>
        <member name="M:InDoOut_Core.Basic.Value.ToString">
            <summary>
            Gets the string representation of this value.
            </summary>
            <returns>The string representation of this value.</returns>
        </member>
        <member name="T:InDoOut_Core.Basic.ValueChangedEvent">
            <summary>
            Represents an event triggered when the stored value is changed.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Basic.ValueChangedEvent.Value">
            <summary>
            The value that has changed.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Basic.ValueChangedEvent.#ctor(InDoOut_Core.Basic.IValue)">
            <summary>
            Creates a basic event with a given value.
            </summary>
            <param name="value">The value that has changed.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.Entity">
            <summary>
            A base, saveable entity. The root of all other entities.
            </summary>
            <seealso cref="T:InDoOut_Core.Entities.Core.IEntity"/>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.Entity.Id">
            <summary>
            The unique ID of this entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.Entity.Metadata">
            <summary>
            Metadata associated with the entity.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.Entity.ToString">
            <summary>
            Gets the string representation of this entity.
            </summary>
            <returns>The string representation of this entity.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.IConnectable">
            <summary>
            Represents an object that can be connected to an entity.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.IConnectable.CanAcceptConnection(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Check whether or not a <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can be connected to this
            object.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether or not the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can be connected.</returns>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.IConnectable.RawConnections">
            <summary>
            The connections this object has.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.IConnectable`1">
            <summary>
            Represents an object that can be connected to an entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.IConnectable`1.Connections">
            <summary>
            The connections this object has.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.IEntity">
            <summary>
            Represents a base entity. All entities are <see cref="T:InDoOut_Core.Basic.IStored"/>, so can
            be saved.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.IInputable">
            <summary>
            Represents an entity that is an input into a process.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.INamedEntity">
            <summary>
            Represents an <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> that can have a name.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.InteractiveEntity`2">
            <summary>
            An entity that can be connected to and triggered by another <see cref="T:InDoOut_Core.Entities.Core.IEntity"/>.
            </summary>
            <typeparam name="ConnectsToType">The <see cref="T:InDoOut_Core.Entities.Core.ITriggerable"/> that this entity can connect to.</typeparam>
            <typeparam name="ConnectsFromType">The <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> that this entity can accept connections from.</typeparam>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.InteractiveEntity`2.Running">
            <summary>
            The current running state of this entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.InteractiveEntity`2.LastTriggerTime">
            <summary>
            The last time this entity was triggered.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.InteractiveEntity`2.RawConnections">
            <summary>
            The connections that this entity has.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.InteractiveEntity`2.Connections">
            <summary>
            The connections that this entity has.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.InteractiveEntity`2.Finishing">
            <summary>
            Represents a state where the entity is technically still running, but is in a state
            where it is tidying up from the previous trigger, and can accept new triggers.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.Trigger(`1)">
            <summary>
            Triggers this entity from another entity.
            </summary>
            <param name="triggeredBy">The entity that triggered this one.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.CanBeTriggered(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Checks whether a given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can trigger this.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can trigger this.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.CanAcceptConnection(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Checks whether a given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can connect to this.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can trigger this.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.HasBeenTriggeredSince(System.DateTime)">
            <summary>
            Checks whether the entity has been triggered since the given <paramref name="time"/>.
            </summary>
            <param name="time">The time to check.</param>
            <returns>Whether the entity has been triggered since the given time.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.HasBeenTriggeredWithin(System.TimeSpan)">
            <summary>
            Checks whether the entity has been triggered within the given <paramref name="time"/>. Passing a time
            of 5 seconds will return whether the entity has been triggered within the last 5 seconds.
            </summary>
            <param name="time">The time to check.</param>
            <returns>Whether the entity has been triggered within the given time.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.ToString">
            <summary>
            A string representation of this entity.
            </summary>
            <returns>A string representation of this entity.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.AddConnection(`0)">
            <summary>
            Adds a connection to the entity.
            </summary>
            <param name="connection">The connection to add.</param>
            <returns>Whether the connection was added.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.AddConnections(`0[])">
            <summary>
            Adds numerous connections to the entity.
            </summary>
            <param name="connections">The connections to add.</param>
            <returns>Whether all connections were added.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.RemoveConnection(`0)">
            <summary>
            Removes a connection from the entity.
            </summary>
            <param name="connection">The connection to remove.</param>
            <returns>Whether the connection was found and removed.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.RemoveConnections(`0[])">
            <summary>
            Removes numerous connections from the entity.
            </summary>
            <param name="connections">The connectsions to remove.</param>
            <returns>Whether all connections were removed.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.RemoveAllConnections">
            <summary>
            Removes all connections from the entity.
            </summary>
            <returns>Whether all connections were removed.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.SetConnection(`0[])">
            <summary>
            Sets the current connections to the given connections. This removes
            all current connections.
            </summary>
            <param name="connections">The connections to set.</param>
            <returns>Whether the connections were set.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.InteractiveEntity`2.Process(`1)">
            <summary>
            Begins processing after being triggered by a connected entity.
            </summary>
            <param name="triggeredBy">The entity that triggered this.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.IOutputable">
            <summary>
            Represents an entity that is a generic output from a process.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.IProcessable">
            <summary>
            Represents an entity that is capable of processing something.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.ITriggerable">
            <summary>
            Represents an entity that can be triggered by another entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.ITriggerable.Running">
            <summary>
            The current running state of the object.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.ITriggerable.Finishing">
            <summary>
            Represents a state where the entity is technically still running, but is in a state
            where it is coming to a finish and can be triggered again regardless.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Core.ITriggerable.LastTriggerTime">
            <summary>
            The time this entity was last triggered.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.ITriggerable.CanBeTriggered(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Check whether or not the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> can trigger this object.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether this object can be triggered by the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.ITriggerable.HasBeenTriggeredSince(System.DateTime)">
            <summary>
            Checks whether the entity has been triggered since the given <paramref name="time"/>.
            </summary>
            <param name="time">The time to check.</param>
            <returns>Whether the entity has been triggered since the given time.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.ITriggerable.HasBeenTriggeredWithin(System.TimeSpan)">
            <summary>
            Checks whether the entity has been triggered within the given <paramref name="time"/>. Passing a time
            of 5 seconds will return whether the entity has been triggered within the last 5 seconds.
            </summary>
            <param name="time">The time to check.</param>
            <returns>Whether the entity has been triggered within the given time.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Core.ITriggerable`1">
            <summary>
            Represents an entity that can be triggered by another entity.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Core.ITriggerable`1.Trigger(`0)">
            <summary>
            Triggers this entity using the given <typeparamref name="TriggerType"/>
            </summary>
            <param name="triggeredBy">The entity to trigger this object.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Function">
            <summary>
            A self contained block that can do processing independently of any other function. These have inputs and
            outputs, where the inputs trigger the function which then trigger an output.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.StopRequested">
            <summary>
            Stop has been requested on the task, and it should be terminated as soon
            as possible.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.State">
            <summary>
            The current function state. See <see cref="P:InDoOut_Core.Entities.Functions.Function.State"/> for more
            info on the states.
            </summary>
            <seealso cref="P:InDoOut_Core.Entities.Functions.Function.State"/>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.VariableStore">
            <summary>
            The current variable store.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Inputs">
            <summary>
            The inputs that belong to this function.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Properties">
            <summary>
            The properties that this function accepts.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Results">
            <summary>
            The results that this function gives.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Outputs">
            <summary>
            The outputs that belong to this function.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.SafeName">
            <summary>
            An exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.Function.Name"/>
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.SafeDescription">
            <summary>
            An exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.Function.Description"/>
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.SafeGroup">
            <summary>
            An exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.Function.Group"/>
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.SafeKeywords">
            <summary>
            An exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.Function.Keywords"/>
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Finishing">
            <summary>
            Returns whether the function is in a finishing state, where it can be triggered again regardless
            of the current <see cref="P:InDoOut_Core.Entities.Core.ITriggerable.Running"/> state.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.TriggerOnFailure">
            <summary>
            The output that should be triggered if the function has an uncaught exception.
            If an output should not be triggered on failure, it should be null.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Description">
            <summary>
            The description of what the function does.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Name">
            <summary>
            The name of the function.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Group">
            <summary>
            The group this function belongs to. This is to allow for easier categorisation
            of functions.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Function.Keywords">
            <summary>
            Keywords associated with this function. This allows for similar words to match
            this function when being searched for.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.#ctor">
            <summary>
            Creates a basic function.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.PolitelyStop">
            <summary>
            Makes a request for the function to stop when it's safe to do so, for example
            on filesystem actions. If there's nothing in place, the underlying code doesn't
            have to listen to this request, and provisions may not be in place to stop it.
            For any code that listens for <see cref="P:InDoOut_Core.Entities.Functions.Function.StopRequested"/> they will stop when
            this method is called.
            </summary>
            <seealso cref="P:InDoOut_Core.Entities.Functions.Function.StopRequested"/>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.ToString">
            <summary>
            A string representation of this entity.
            </summary>
            <returns>A string representation of this entity.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.CreateInput(System.String)">
            <summary>
            Creates an input for this function.
            </summary>
            <param name="name">The name of the input.</param>
            <returns>The input that was created.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.CreateOutput(System.String,InDoOut_Core.Entities.Functions.OutputType)">
            <summary>
            Creates an output for this function.
            </summary>
            <param name="outputType">The type of output to create. Different types return different classes.</param>
            <param name="name">The name of the output.</param>
            <returns>The output that was created.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.CreateOutput(InDoOut_Core.Entities.Functions.OutputType,System.String)">
            <summary>
            Creates an output for this function.
            </summary>
            <param name="name">The name of the output.</param>
            <param name="outputType">The type of output to create. Different types return different classes.</param>
            <returns>The output that was created.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.AddProperty``1(``0,System.Boolean)">
            <summary>
            Adds a property to the function and returns the same property as a result. This allows it to be created and added
            on the same line.
            </summary>
            <typeparam name="T">The type of <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/> to add.</typeparam>
            <param name="property">The property to add.</param>
            <param name="mirrorAsResult">Whether to mirror this property as a result automatically. This will copy the property value into the result value when activated.</param>
            <returns>The given <paramref name="property"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.AddResult``1(``0)">
            <summary>
            Adds a result to the function and returns the same result as a result. This allows it to be created and added
            on the same line.
            </summary>
            <typeparam name="T">The type of <see cref="T:InDoOut_Core.Entities.Functions.IResult"/> to add.</typeparam>
            <param name="result">The property to add.</param>
            <returns>The given <paramref name="result"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.BuildInput(System.String)">
            <summary>
            A builder for creating an <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> entity
            when requested.
            </summary>
            <param name="name">The name of the input.</param>
            <returns>A new input for a given name.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.BuildOutput(System.String,InDoOut_Core.Entities.Functions.OutputType)">
            <summary>
            A builder for creating an <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> entity
            when requested.
            </summary>
            <param name="name">The name of the output.</param>
            <param name="outputType">The type of output to create.</param>
            <returns>A new output for a given name.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.Process(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Start processing the function code. Sets up all states.
            </summary>
            <param name="triggeredBy">The entity that triggered this.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Function.Started(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Start the main code, given a <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>. This will return the <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
            that should be triggered at the end of processing.
            </summary>
            <param name="triggeredBy">The entity that triggered this.</param>
            <returns>An <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> that should be triggered after this code.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.State">
            <summary>
            The current operating state of a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Unknown">
            <summary>
            The function is in an unknown state and hasn't been initialised properly.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Placing">
            <summary>
            The function is being placed from within an editor.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Disabled">
            <summary>
            The function is currently disabled and will not trigger.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Waiting">
            <summary>
            The function is currently waiting to be triggered.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Processing">
            <summary>
            The function has been triggered and is currently processing.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Completing">
            <summary>
            The function has finished core processing and is cleaning up.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.Stopping">
            <summary>
            The function has been requested to stop and is stopping.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.State.InError">
            <summary>
            The entity has failed in some way and is in an error state.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IFunction">
            <summary>
            Represents a function block containing <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>s and 
            <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>s. This can be triggered with a <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>,
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.State">
            <summary>
            The current state of the function. See <see cref="P:InDoOut_Core.Entities.Functions.IFunction.State"/> for more
            details on the states that this function can enter.
            </summary>
            <seealso cref="P:InDoOut_Core.Entities.Functions.IFunction.State"/>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.StopRequested">
            <summary>
            Stop has been requested on the function, and it should be terminated as soon
            as possible.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.SafeName">
            <summary>
            A thread safe, exception safe version of <see cref="P:InDoOut_Core.Basic.INamed.Name"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.SafeDescription">
            <summary>
            A thread safe, exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.IFunction.Description"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.SafeGroup">
            <summary>
            A thread safe, exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.IFunction.Group"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.SafeKeywords">
            <summary>
            A thread safe, exception safe version of <see cref="P:InDoOut_Core.Entities.Functions.IFunction.Keywords"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Description">
            <summary>
            The description of what the function does. This will be how it is seen by the user.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Group">
            <summary>
            What group this function belongs to. This will allow for it to be categorised into
            similar groups so they can be filtered easily.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Keywords">
            <summary>
            Keywords associated with this function. This allows for it to be searched for by similar
            names.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Inputs">
            <summary>
            All inputs that this function has.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Outputs">
            <summary>
            All outputs that this function has.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Properties">
            <summary>
            All properties that this function accepts.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.Results">
            <summary>
            All results that this function gives.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.TriggerOnFailure">
            <summary>
            The output that should be triggered if the function has an uncaught exception.
            If an output should not be triggered on failure, it should be null.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IFunction.VariableStore">
            <summary>
            A shared variable store between multiple functions.
            </summary>
            <seealso cref="T:InDoOut_Core.Variables.IVariableStore"/>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IFunction.PolitelyStop">
            <summary>
            Politely asks for the function to be stopped, and waits for the user code to
            listen to the request. If the user code has no listener, it will continue
            regardless, and there's nothing that can be done about this.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IInput">
            <summary>
            Represents an input that is triggered by
            any <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IInput.Parent">
            <summary>
            The parent of this input.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.ILoopFunction">
            <summary>
            Represents a loop function capabl;e of iterating over indexes.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Input">
            <summary>
            Inputs are triggered by <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>s. These intputs are simple connections for
            <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s which can trigger the code within them. The <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> may
            perform different actions based on the type of input that was triggered.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Input.Name">
            <summary>
            The name of this input.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Input.Parent">
            <summary>
            The parent this input belongs to.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Input.Finishing">
            <summary>
            Whether this input is currently tidying up and ready to accept
            a new trigger, even if it's technically still running.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Input.#ctor(InDoOut_Core.Entities.Functions.IFunction,System.String)">
            <summary>
            Creates a generic input with a parent.
            </summary>
            <param name="parent">The <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> this input belongs to.</param>
            <param name="name">The name of this input.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Input.ToString">
            <summary>
            A string representation of this entity.
            </summary>
            <returns>A string representation of this entity.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Input.Equals(System.Object)">
            <summary>
            Checks whether an input is equal to another input.
            </summary>
            <param name="obj">The other object to compare.</param>
            <returns>Whether a given object is equal to this input.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Input.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Input.Process(InDoOut_Core.Entities.Functions.IOutput)">
            <summary>
            Begins processing this input. This calls the <see cref="P:InDoOut_Core.Entities.Functions.Input.Parent"/> it is connected to.
            </summary>
            <param name="triggeredBy">The <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> that triggered this input.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.OutputType">
            <summary>
            The type of output.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.OutputType.Positive">
            <summary>
            An output from a good result.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.OutputType.Negative">
            <summary>
            An output from a bad result.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.OutputType.Neutral">
            <summary>
            An output from neither a good nor bad result.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IOutput">
            <summary>
            Represents an output that can be connected to any
            <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> entity and is triggered by a
            <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> entity.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IOutput.Connect(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Connect this output to an <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>.
            </summary>
            <param name="input">The <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> to connect to.</param>
            <returns>Whether a connection was made.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IOutput.Disconnect(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Disconnect this output from an <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>.
            </summary>
            <param name="input">The <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> to disconnect from.</param>
            <returns>Whether the input was disconnected.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IOutputNegative">
            <summary>
            Represents a negative output from a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>. See <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
            for more generalised info.
            </summary>
            <seealso cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IOutputNeutral">
            <summary>
            Represents a neutral output from a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>.
            Neutral outputs are neither positive or negative.
            See <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/> for more generalised info.
            </summary>
            <seealso cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IOutputPositive">
            <summary>
            Represents a positive output from a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>. See <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
            for more generalised info.
            </summary>
            <seealso cref="T:InDoOut_Core.Entities.Functions.IOutput"/>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IProperty">
            <summary>
            Represents a property, which are values that can be applied to
            <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s to alter their behaviour, or provide
            required input values.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.Required">
            <summary>
            Whether or not this property is required for the function to work.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IProperty.Connect(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Connects the property to a function.
            </summary>
            <param name="function">The function to connect to.</param>
            <returns>Whether the connection was successful.</returns>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.Description">
            <summary>
            The description of what this property does.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.SafeDescription">
            <summary>
            A safer way of getting <see cref="P:InDoOut_Core.Entities.Functions.IProperty.Description"/> without exceptions.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.RawComputedValue">
            <summary>
            Computes the value based off of whether <see cref="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable"/> is set or
            not. If it is set, it will use the <see cref="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable"/> for the value,
            or otherwise it just uses <see cref="P:InDoOut_Core.Basic.IValue.RawValue"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable">
            <summary>
            A variable that is associated with this property. This automatically sets
            the value of the property to that of the variable when the value is requested.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty.Parent">
            <summary>
            The parent of this input.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IProperty`1">
            <summary>
            Represents a specific type of property that has a value automatically
            converted to and from type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to and from.</typeparam>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty`1.BasicValue">
            <summary>
            The value of this property.
            <br/>
            <br/>
            <b>WARNING:</b> Consider <see cref="P:InDoOut_Core.Entities.Functions.IProperty`1.FullValue"/> or <see cref="P:InDoOut_Core.Entities.Functions.IProperty.RawComputedValue"/> instead for getting the value of the property,
            as those will include values from any connected <see cref="T:InDoOut_Core.Entities.Functions.IResult"/>s whereas this won't, which could cause unintended side effects.
            </summary>
            <seealso cref="P:InDoOut_Core.Entities.Functions.IProperty`1.FullValue"/>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IProperty`1.FullValue">
            <summary>
            Computes the value based off of whether <see cref="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable"/> is set or
            not. If it is set, it will use the <see cref="P:InDoOut_Core.Entities.Functions.IProperty.AssociatedVariable"/> for the value,
            or otherwise it just uses <see cref="P:InDoOut_Core.Entities.Functions.IProperty`1.BasicValue"/>.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IResult">
            <summary>
            Represents a result from a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>. Results are values given when the function has
            completed, and can be used to set <see cref="T:InDoOut_Core.Variables.IVariable"/> values which can then be
            used to set <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/> values on other functions.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IResult.IsSet">
            <summary>
            Whether the result has a value set on it or not.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IResult.Connect(InDoOut_Core.Entities.Functions.IProperty)">
            <summary>
            Connects this result to an <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/>.
            </summary>
            <param name="property">The property to connect to.</param>
            <returns>Whether the connection was successful.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IResult.Disconnect(InDoOut_Core.Entities.Functions.IProperty)">
            <summary>
            Disconnect this result from an <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/>.
            </summary>
            <param name="input">The <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/> to disconnect from.</param>
            <returns>Whether the property was disconnected.</returns>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IResult.Description">
            <summary>
            The description of what this result represents.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IResult.VariableName">
            <summary>
            The name of the variable that will be set when the associated <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>
            completes.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IResult.SetVariable(InDoOut_Core.Variables.IVariableStore)">
            <summary>
            Sets a variable with a name of the given <see cref="P:InDoOut_Core.Entities.Functions.IResult.VariableName"/> and value of
            <see cref="P:InDoOut_Core.Basic.IValue.RawValue"/> inside the given <paramref name="variableStore"/>.
            </summary>
            <param name="variableStore">A variable store to create/update the variable.</param>
            <returns>Whether the variable was set or not.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.IResult.SetVariable(InDoOut_Core.Variables.IVariable)">
            <summary>
            Sets a variable's value directly from the <see cref="P:InDoOut_Core.Basic.IValue.RawValue"/> without
            accounting for the variable name. It is recommended to use <see cref="M:InDoOut_Core.Entities.Functions.IResult.SetVariable(InDoOut_Core.Variables.IVariableStore)"/>
            instead, as it takes care of creating/updating the correct variable.
            </summary>
            <param name="variable">The variable to set.</param>
            <returns>Whether the variable was set or not.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.ISelfRunnerFunction">
            <summary>
            Represents a function capable of running an <see cref="T:InDoOut_Core.Entities.Programs.IProgram"/> within itself.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.ISelfRunnerFunction.LoadedProgram">
            <summary>
            The program currently loaded into the function.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.IStartFunction">
            <summary>
            Represents a function that is called automatically when the <see cref="T:InDoOut_Core.Entities.Programs.IProgram"/> is started.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.IStartFunction.PassthroughResults">
            <summary>
            A list of results that are passed through from another program, or the command line.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.LoopFunction">
            <summary>
            A loop function that encapsulates all processing for looping through
            a series of indexes and populating data for each of them.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.LoopFunction.#ctor">
            <summary>
            Creates a basic loop function.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.LoopFunction.Started(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            When the loop function has been triggered.
            </summary>
            <param name="triggeredBy">The input that triggered the loop.</param>
            <returns>The output to trigger on completion.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.LoopFunction.PreprocessItems">
            <summary>
            Sets up all items before procesisng the first index.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.LoopFunction.AllItemsComplete">
            <summary>
            Tears down all items after processing is complete.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.LoopFunction.PopulateItemDataForIndex(System.Int32)">
            <summary>
            Populates item data for a specific index and returns whether there are
            more indexes to fetch.
            </summary>
            <param name="index">The index to process.</param>
            <returns>Whether there are more indexes to fetch.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Output">
            <summary>
            Outputs are triggered by <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s. These outputs are simple connections for
            <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>s which then trigger their connected entity.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Output.Name">
            <summary>
            The name of this output.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Output.Finishing">
            <summary>
            Whether this output is currently tidying up and ready to accept
            a new trigger, even if it's technically still running.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.#ctor(System.String)">
            <summary>
            Creates a basic output with a name.
            </summary>
            <param name="name">The name to give the output.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.Connect(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Connects this output to a given <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>.
            </summary>
            <param name="input">The <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> to connect to.</param>
            <returns>Whether the connection was made.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.Disconnect(InDoOut_Core.Entities.Functions.IInput)">
            <summary>
            Disconnects this output from a given <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>.
            </summary>
            <param name="input">The <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> to disconnect from.</param>
            <returns>Whether the connection was disconnected.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.ToString">
            <summary>
            A string representation of this entity.
            </summary>
            <returns>A string representation of this entity.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Output.Process(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Begins processing this output. This calls all the <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>s it is connected to.
            </summary>
            <param name="triggeredBy">The <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> that triggered this output.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.OutputNegative">
            <summary>
            A negative output. These are generally used on bad results.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.OutputNegative.#ctor(System.String)">
            <summary>
            Creates a negative output. Negative outputs should be used where the result
            is bad.
            </summary>
            <param name="name">The name of the output.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.OutputNeutral">
            <summary>
            A neutral output. These are used on neither good nor bad results.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.OutputNeutral.#ctor(System.String)">
            <summary>
            Creates a neutral output. Neutral outputs should be used where the result
            is neither good nor bad.
            </summary>
            <param name="name">The name of the output.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.OutputPositive">
            <summary>
            A positive output. These are generally used on good results.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.OutputPositive.#ctor(System.String)">
            <summary>
            Creates a positive output. Positive outputs should be used where the result
            is good.
            </summary>
            <param name="name">The name of the output.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Property`1">
            <summary>
            Properties are values that change how a <see cref="T:InDoOut_Core.Entities.Functions.Function"/> operates, or passes information into a
            function to be calculated. These can be set by the user, or automatically set by the <see cref="P:InDoOut_Core.Entities.Functions.Property`1.AssociatedVariable"/>.
            </summary>
        </member>
        <member name="E:InDoOut_Core.Entities.Functions.Property`1.OnValueChanged">
            <summary>
            An event that gets fired when the value changes.
            <para/>
            Note: Not thread safe. This spawns a new thread every time the value changes.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.SafeDescription">
            <summary>
            A safe way of getting the <see cref="P:InDoOut_Core.Entities.Functions.Property`1.Description"/> of a property without exceptions.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.AssociatedVariable">
            <summary>
            The variable associated with this property. If set to anything other than null it will use the
            value of the variable as the <see cref="P:InDoOut_Core.Entities.Functions.Property`1.RawComputedValue"/>, rather than using <see cref="P:InDoOut_Core.Entities.Functions.Property`1.RawValue"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.Parent">
            <summary>
            The parent this property belongs to.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.RawComputedValue">
            <summary>
            The full computed value of the property. If <see cref="P:InDoOut_Core.Entities.Functions.Property`1.AssociatedVariable"/> is set it will use the
            value assigned to the variable, rather than <see cref="P:InDoOut_Core.Entities.Functions.Property`1.RawValue"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.Required">
            <summary>
            Whether or not this is a required value for the function to operate.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.Description">
            <summary>
            The description of what this property does.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.BasicValue">
            <summary>
            The value of this property, as the given type <typeparamref name="T"/>. This is similar to <see cref="P:InDoOut_Core.Entities.Functions.Property`1.RawValue"/>,
            but is automatically converted to the type of this property.
            <br/>
            <br/>
            <b>WARNING:</b> Consider <see cref="P:InDoOut_Core.Entities.Functions.Property`1.FullValue"/> or <see cref="P:InDoOut_Core.Entities.Functions.Property`1.RawComputedValue"/> instead for getting the value of the property,
            as those will include values from any connected <see cref="T:InDoOut_Core.Entities.Functions.IResult"/>s whereas this won't, which could cause unintended side effects.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.FullValue">
            <summary>
            The full computed value of the property as type <typeparamref name="T"/>. If <see cref="P:InDoOut_Core.Entities.Functions.Property`1.AssociatedVariable"/> is set it will use the
            value assigned to the variable, rather than <see cref="P:InDoOut_Core.Entities.Functions.Property`1.BasicValue"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.ValidValue">
            <summary>
            Returns whether the current value is valid.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.RawValue">
            <summary>
            Gets the raw, unprocessed value of this property.
            <br/>
            <br/>
            <b>WARNING:</b> Consider <see cref="P:InDoOut_Core.Entities.Functions.Property`1.FullValue"/> or <see cref="P:InDoOut_Core.Entities.Functions.Property`1.RawComputedValue"/> instead for getting the value of the property,
            as those will include values from any connected <see cref="T:InDoOut_Core.Entities.Functions.IResult"/>s whereas this won't, which could cause unintended side effects.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Property`1.Name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Property`1.#ctor(System.String,System.String,System.Boolean,`0)">
            <summary>
            Creates a basic property with a name, description and optional requirement and initial value.
            </summary>
            <param name="name">The name of this property. This is visible to the user.</param>
            <param name="description">The description of this property. This is visible to the user.</param>
            <param name="required">Whether or not this property is required for the function to run.</param>
            <param name="initialValue">The initial value of the property.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Property`1.Connect(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Connects the <see cref="T:InDoOut_Core.Entities.Functions.Property`1"/> to a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>.
            </summary>
            <param name="function">The function to connect to.</param>
            <returns>Whether the connection was successful.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Property`1.ValueFrom``1(``0)">
            <summary>
            Sets the current value from the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="Type">The type to convert from.</typeparam>
            <param name="value">The value to store.</param>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Property`1.ValueOrDefault(System.String)">
            <summary>
            Gets the <see cref="P:InDoOut_Core.Entities.Functions.Property`1.RawValue"/>, or <paramref name="defaultValue"/> if null.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Property`1.ValueAs``1(``0)">
            <summary>
            Returns the value as the given <typeparamref name="Type"/>.
            </summary>
            <typeparam name="Type">The type to convert to.</typeparam>
            <param name="defaultValue">On failure, default to this value.</param>
            <returns>The value as <typeparamref name="Type"/>, or <paramref name="defaultValue"/> if failed.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Property`1.ToString">
            <summary>
            A string representation of this entity.
            </summary>
            <returns>A string representation of this entity.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Property`1.Process(InDoOut_Core.Entities.Functions.IResult)">
            <summary>
            Processes the property fro the <see cref="T:InDoOut_Core.Entities.Functions.IResult"/> that triggered it.
            </summary>
            <param name="triggeredBy">The <see cref="T:InDoOut_Core.Entities.Functions.IResult"/> that triggerd this.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.Result">
            <summary>
            Results are values that are set when a <see cref="T:InDoOut_Core.Entities.Functions.Function"/> is run. These values
            can be named and will set a <see cref="T:InDoOut_Core.Variables.IVariable"/> of that name when
            the function is finished. Those values can then be used on <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/>
            values.
            </summary>
        </member>
        <member name="E:InDoOut_Core.Entities.Functions.Result.OnValueChanged">
            <summary>
            An event that gets fired when the value changes.
            <para/>
            Note: Not thread safe. This spawns a new thread every time the value changes.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Result.IsSet">
            <summary>
            Whether this result contains a valid value, in order to set a corrisponding
            <see cref="T:InDoOut_Core.Variables.IVariable"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Result.Description">
            <summary>
            A description of what this result represents.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Result.VariableName">
            <summary>
            The name of the variable that will be set when the associated <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>
            completes.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Result.Name">
            <summary>
            The name of the result.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Result.ValidValue">
            <summary>
            Whether the value of this result is valid.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.Result.RawValue">
            <summary>
            The raw value of this property.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a result with a name, description and optional defaultValue.
            </summary>
            <param name="name">The name of this result. This is visible to the user.</param>
            <param name="description">The description of this result. This is visible to the user.</param>
            <param name="defaultValue">The default value to set on this result.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.Connect(InDoOut_Core.Entities.Functions.IProperty)">
            <summary>
            Connects this result to a <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/>.
            </summary>
            <param name="property">The property to connect to.</param>
            <returns>Whether the connection was a success.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.Disconnect(InDoOut_Core.Entities.Functions.IProperty)">
            <summary>
            Disconnects this result from a <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/>.
            </summary>
            <param name="property">The property to disconnect from.</param>
            <returns>Whether the disconnection was a success.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.SetVariable(InDoOut_Core.Variables.IVariableStore)">
            <summary>
            Sets a variable with a name of the given <see cref="P:InDoOut_Core.Entities.Functions.Result.VariableName"/> and value of
            <see cref="P:InDoOut_Core.Entities.Functions.Result.RawValue"/> inside the given <paramref name="variableStore"/>.
            </summary>
            <param name="variableStore">A variable store to create/update the variable.</param>
            <returns>Whether the variable was set or not.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.SetVariable(InDoOut_Core.Variables.IVariable)">
            <summary>
            Sets a variable's value directly from the <see cref="P:InDoOut_Core.Entities.Functions.Result.RawValue"/> without
            accounting for the variable name. It is recommended to use <see cref="M:InDoOut_Core.Entities.Functions.Result.SetVariable(InDoOut_Core.Variables.IVariableStore)"/>
            instead, as it takes care of creating/updating the correct variable.
            </summary>
            <param name="variable">The variable to set.</param>
            <returns>Whether the variable was set or not.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.ValueFrom``1(``0)">
            <summary>
            Sets the value from the given <paramref name="value"/> of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert from.</typeparam>
            <param name="value">The value to store.</param>
            <returns>Whether the value has been set.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.ValueOrDefault(System.String)">
            <summary>
            Returns the <see cref="P:InDoOut_Core.Entities.Functions.Result.RawValue"/>, or <paramref name="defaultValue"/> if null.
            </summary>
            <param name="defaultValue">The default value to return on failure.</param>
            <returns>The value of this result.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.ValueAs``1(``0)">
            <summary>
            Returns the value converted to type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="defaultValue">The default value to return if converison is not possible.</param>
            <returns>The <see cref="P:InDoOut_Core.Entities.Functions.Result.RawValue"/> as type <typeparamref name="T"/>, or <paramref name="defaultValue"/> if conversion was not possible.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.ToString">
            <summary>
            A string representation of this entity.
            </summary>
            <returns>A string representation of this entity.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.Result.Process(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Processes the result from the function that triggered it.
            </summary>
            <param name="triggeredBy">The function that triggered this result.</param>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.SelfRunnerFunction">
            <summary>
            A function that is capable of running another <see cref="T:InDoOut_Core.Entities.Programs.IProgram"/> internally. This allows
            for visibility into what the program is processing.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.SelfRunnerFunction.LoadedProgram">
            <summary>
            The currently loaded program.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Functions.StartFunction">
            <summary>
            A self contained block that can do processing independently of any other function. <see cref="T:InDoOut_Core.Entities.Functions.StartFunction"/>s are
            slightly different to <see cref="T:InDoOut_Core.Entities.Functions.Function"/>s, where instead of only being able to be triggered by a given <see cref="T:InDoOut_Core.Entities.Functions.IInput"/>,
            they are triggered automatically at the start of a <see cref="T:InDoOut_Core.Entities.Programs.IProgram"/>.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Entities.Functions.StartFunction.TOTAL_OUTPUTS">
            <summary>
            The total number of passthrough outputs available on the start function.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.StartFunction.Group">
            <summary>
            The group this function belongs to.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.StartFunction.PassthroughResults">
            <summary>
            A list of results passed through from another program or the commandline.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Functions.StartFunction.OutputStart">
            <summary>
            The 'started' output that should be triggered when this function is called.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Functions.StartFunction.#ctor">
            <summary>
            Creates a basic start function.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Entities.Programs.IProgram">
            <summary>
            Represents a group of self contained <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s that have
            interactivity between each other.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.IProgram.Stopping">
            <summary>
            Whether any functions in the program are still stopping.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.IProgram.Functions">
            <summary>
            All <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>s that are contained within this program.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.IProgram.StartFunctions">
            <summary>
            All <see cref="T:InDoOut_Core.Entities.Functions.IStartFunction"/>s that are available to be started when the 
            program is started.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.IProgram.PassthroughValues">
            <summary>
            Values to pass into all <see cref="P:InDoOut_Core.Entities.Programs.IProgram.StartFunctions"/> when the program is started.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.IProgram.VariableStore">
            <summary>
            The variable store for this program. This is where <see cref="T:InDoOut_Core.Variables.IVariable"/>s are
            held for functions.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.IProgram.Stop">
            <summary>
            Sends a request to all functions in the program to stop running. This is controlled by
            <see cref="M:InDoOut_Core.Entities.Functions.IFunction.PolitelyStop"/>, so functions may take time to fully stop running.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.IProgram.SetName(System.String)">
            <summary>
            Sets the program name.
            </summary>
            <param name="name">The name to set.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.IProgram.AddFunction(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Add a function to the program.
            </summary>
            <param name="function">The function to add to the program.</param>
            <returns>Whether the function was added.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.IProgram.RemoveFunction(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Removes a function from the program.
            </summary>
            <param name="function">The function to remove from the program.</param>
            <returns>Whether the function was found and removed.</returns>
        </member>
        <member name="T:InDoOut_Core.Entities.Programs.Program">
            <summary>
            A collection of <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> entities linked together and started through the
            <see cref="P:InDoOut_Core.Entities.Programs.Program.StartFunctions"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.Functions">
            <summary>
            All functions within this program.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.StartFunctions">
            <summary>
            All <see cref="T:InDoOut_Core.Entities.Functions.IStartFunction"/>s within this program.
            These are triggered when the program is triggered, and the program will not
            start without at least one.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.PassthroughValues">
            <summary>
            Values to pass into <see cref="P:InDoOut_Core.Entities.Programs.Program.StartFunctions"/> when the program is started.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.Running">
            <summary>
            Whether any of the functions within this program are running.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.Finishing">
            <summary>
            Whether the program is currently tidying up before completion.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.Stopping">
            <summary>
            Whether any of the functions within this program are still stopping.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.Name">
            <summary>
            The name of this program.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.LastTriggerTime">
            <summary>
            The last time this program was triggered.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Entities.Programs.Program.VariableStore">
            <summary>
            The current variable store for all program variables.
            </summary>
            <seealso cref="P:InDoOut_Core.Entities.Programs.Program.VariableStore"/>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.#ctor(System.String[])">
            <summary>
            Creates a program with optional passthrough values.
            </summary>
            <param name="passthroughValues">Values to pass into the <see cref="T:InDoOut_Core.Entities.Functions.IStartFunction"/>s when triggered.</param>
            <seealso cref="M:InDoOut_Core.Entities.Programs.Program.Trigger(InDoOut_Core.Entities.Core.IEntity)"/>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.AddFunction(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Add a function to the program.
            </summary>
            <param name="function">The function to add.</param>
            <returns>Whether the function was added.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.RemoveFunction(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Removes a function from the program.
            </summary>
            <param name="function">The function to remove.</param>
            <returns>Whether the function was found and removed.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.CanBeTriggered(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Whether this program can be triggered by the given <see cref="T:InDoOut_Core.Entities.Core.IEntity"/>.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Whether this program can be triggered by the entity.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.Trigger(InDoOut_Core.Entities.Core.IEntity)">
            <summary>
            Trigger this program. This will start all available <see cref="P:InDoOut_Core.Entities.Programs.Program.StartFunctions"/>.
            </summary>
            <param name="triggeredBy">The <see cref="T:InDoOut_Core.Entities.Core.IEntity"/> that triggered this.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.Stop">
            <summary>
            Attempts to stop program execution by sending the <see cref="M:InDoOut_Core.Entities.Functions.IFunction.PolitelyStop"/> call
            to every function in the program. It's up to the function to stop cleanly, so it might take some
            time to fully stop. See <see cref="P:InDoOut_Core.Entities.Programs.Program.Stopping"/> to see the state of this procedure.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.SetName(System.String)">
            <summary>
            Sets the program name to the given value.
            </summary>
            <param name="name">The program name to set.</param>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.HasBeenTriggeredSince(System.DateTime)">
            <summary>
            Checks whether the program has been triggered since the given <paramref name="time"/>.
            </summary>
            <param name="time">The time to check.</param>
            <returns>Whether the program has been triggered since the given time.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.HasBeenTriggeredWithin(System.TimeSpan)">
            <summary>
            Checks whether the program has been triggered within the given <paramref name="time"/>. Passing a time
            of 5 seconds will return whether the program has been triggered within the last 5 seconds.
            </summary>
            <param name="time">The time to check.</param>
            <returns>Whether the program has been triggered within the given time.</returns>
        </member>
        <member name="M:InDoOut_Core.Entities.Programs.Program.ToString">
            <summary>
            Returns a string representation of a program.
            </summary>
            <returns>A string representation of the program.</returns>
        </member>
        <member name="T:InDoOut_Core.Functions.FunctionBuilder">
            <summary>
            A builder specifically for building classes and subclasses of <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Functions.IFunctionBuilder">
            <summary>
            Represents a builder specifically for building <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/> classes.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Instancing.IInstanceBuilder`1">
            <summary>
            Represents a builder that can generate instances of classes of type <typeparamref name="T"/>.
            It can build all classes that can inherit from or are <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The base class to build from.</typeparam>
        </member>
        <member name="M:InDoOut_Core.Instancing.IInstanceBuilder`1.BuildInstance(System.Type)">
            <summary>
            Builds an instance of the given type. The type has to be inherited from <typeparamref name="T"/>.
            </summary>
            <param name="type">The type to build.</param>
            <returns>The requested type <paramref name="type"/> as type <typeparamref name="T"/>, or null if it has failed.</returns>
        </member>
        <member name="M:InDoOut_Core.Instancing.IInstanceBuilder`1.BuildInstance``1">
            <summary>
            Builds an instance of the given type <typeparamref name="InstanceOf"/>. The type has to be inherited from <typeparamref name="T"/>.
            </summary>
            <typeparam name="InstanceOf">The type to build.</typeparam>
            <returns>The requested type <typeparamref name="InstanceOf"/> as <typeparamref name="T"/>, or null if it has failed.</returns>
        </member>
        <member name="T:InDoOut_Core.Instancing.InstanceBuilder`1">
            <summary>
            Builds instances of type <typeparamref name="T"/> and subclasses.
            </summary>
            <typeparam name="T">The base class to build from.</typeparam>
        </member>
        <member name="M:InDoOut_Core.Instancing.InstanceBuilder`1.BuildInstance(System.Type)">
            <summary>
            Builds an instance of the given type. The type has to be inherited from <typeparamref name="T"/>.
            </summary>
            <param name="type">The type to build.</param>
            <returns>The requested type <paramref name="type"/> as type <typeparamref name="T"/>, or null if it has failed.</returns>
        </member>
        <member name="M:InDoOut_Core.Instancing.InstanceBuilder`1.BuildInstance``1">
            <summary>
            Builds an instance of the given type <typeparamref name="InstanceOf"/>. The type has to be inherited from <typeparamref name="T"/>.
            </summary>
            <typeparam name="InstanceOf">The type to build.</typeparam>
            <returns>The requested type <typeparamref name="InstanceOf"/> as <typeparamref name="T"/>, or null if it has failed.</returns>
        </member>
        <member name="T:InDoOut_Core.Instancing.ISingleton`1">
            <summary>
            Represents a singleton. Singletons have an <see cref="P:InDoOut_Core.Instancing.ISingleton`1.Instance"/> accessor that
            returns a singular instance of a class. If it doesn't exist, it gets built.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Instancing.ISingleton`1.Instance">
            <summary>
            An instance of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Instancing.Singleton`1">
            <summary>
            Creates class singletons of type <typeparamref name="T"/>. Singletons have an <see cref="P:InDoOut_Core.Instancing.Singleton`1.Instance"/> accessor that
            returns a singular instance of class <typeparamref name="T"/>. If it doesn't exist, it gets built.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:InDoOut_Core.Instancing.Singleton`1.Instance">
            <summary>
            An instance of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Instancing.Singleton`1.EnsureInstanceBuilt">
            <summary>
            Ensures an instance has been built. Useful for if something needs to happen in the
            constructor.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Instancing.Singleton`1.CreateInstance">
            <summary>
            Creates and returns a brand new instance of type <typeparamref name="T"/>.
            </summary>
            <returns>A new instance of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:InDoOut_Core.Logging.Log">
            <summary>
            Handles logs between all elements of IDO. Thread safe and can be called from anywhere.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Logging.Log.Enabled">
            <summary>
            Gets or sets whether logging is active or not.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Logging.Log.MaxLogMessages">
            <summary>
            The maximum number of log messages allowed to be kept at once.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Logging.Log.Logs">
            <summary>
            All current logs that have been sent so far, up to <see cref="P:InDoOut_Core.Logging.Log.MaxLogMessages"/>.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Logging.Log.Error(System.Object[])">
            <summary>
            Logs an error with the given message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:InDoOut_Core.Logging.Log.Warning(System.Object[])">
            <summary>
            Logs a warning with the given message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:InDoOut_Core.Logging.Log.Info(System.Object[])">
            <summary>
            Logs info with the given message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:InDoOut_Core.Logging.Log.Header(System.Object[])">
            <summary>
            Logs info with the given message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:InDoOut_Core.Logging.LogMessage">
            <summary>
            Represents a single logged message.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Logging.LogMessage.LogLevel">
            <summary>
            The severity level of a log.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Logging.LogMessage.LogLevel.Header">
            <summary>
            Represents a header over a block of information
            </summary>
        </member>
        <member name="F:InDoOut_Core.Logging.LogMessage.LogLevel.Info">
            <summary>
            A simple info message. Nothing critical to program operation.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Logging.LogMessage.LogLevel.Warning">
            <summary>
            A warning message. These do not impede the program operation, 
            nor have they effected the program operation, but should be noted down.
            </summary>
        </member>
        <member name="F:InDoOut_Core.Logging.LogMessage.LogLevel.Error">
            <summary>
            An unintended exception has occurred and shouldn't have. These are unexpected
            events and should not happen.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Logging.LogMessage.Message">
            <summary>
            The log message. This contains the main part of the log that the user should see.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Logging.LogMessage.CallingAssembly">
            <summary>
            The assembly that activated this message. This can be used for filtering and tracing.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Logging.LogMessage.Level">
            <summary>
            The log level of this log message.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Logging.LogMessage.Time">
            <summary>
            The time that this message was logged.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Logging.LogMessage.#ctor(InDoOut_Core.Logging.LogMessage.LogLevel,System.Reflection.Assembly,System.Object[])">
            <summary>
            Creates a basic <see cref="T:InDoOut_Core.Logging.LogMessage"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="level">The level of the current log.</param>
            <param name="calledFrom">The assembly that activated this log.</param>
        </member>
        <member name="M:InDoOut_Core.Logging.LogMessage.#ctor(InDoOut_Core.Logging.LogMessage.LogLevel,System.Reflection.Assembly,System.DateTime,System.Object[])">
            <summary>
            Creates a basic <see cref="T:InDoOut_Core.Logging.LogMessage"/>, with manual entry of the <paramref name="time"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="level">The level of the current log.</param>
            <param name="calledFrom">The assembly that activated this log.</param>
            <param name="time">The time that this log message occurred.</param>
        </member>
        <member name="M:InDoOut_Core.Logging.LogMessage.ToString">
            <summary>
            Converts the log message to a string.
            </summary>
            <returns>The log message in string form.</returns>
        </member>
        <member name="T:InDoOut_Core.Options.IOption">
            <summary>
            Represents an option that can be saved, loaded and modified by the user.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.IOption.Visible">
            <summary>
            Whether this option should be visible to the user or not.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.IOption.Description">
            <summary>
            The description of the option to be displayed on the interface.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Options.IOption`1">
            <summary>
            Represents a specialised option that has <typeparamref name="ValueType"/> to convert between.
            </summary>
            <typeparam name="ValueType">The core value of this option.</typeparam>
        </member>
        <member name="P:InDoOut_Core.Options.IOption`1.Value">
            <summary>
            The full value of this option.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Options.IOptionHolder">
            <summary>
            Contains options that can be saved and loaded.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.IOptionHolder.Options">
            <summary>
            All stored options.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Options.IOptionHolder.RegisterOption(InDoOut_Core.Options.IOption,System.Boolean)">
            <summary>
            Registers an option with the holder.
            </summary>
            <param name="option">The option to register.</param>
            <param name="setFromUnregisteredOptions">Allows the option value to be set from
            unregistered options if the names match. See <seealso cref="M:InDoOut_Core.Options.IOptionHolder.AddUnregisteredOption(InDoOut_Core.Options.IOption)"/>
            for more on unregistered options.</param>
            <returns>Whether the option was successfully registed.</returns>
        </member>
        <member name="M:InDoOut_Core.Options.IOptionHolder.DeregisterOption(InDoOut_Core.Options.IOption)">
            <summary>
            Deregisters an option from the holder.
            </summary>
            <param name="option">The option to deregister.</param>
            <returns>Whether the option was deregistered successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Options.IOptionHolder.AddUnregisteredOption(InDoOut_Core.Options.IOption)">
            <summary>
            Adds an option that isn't registered, but will set the value of a registered 
            option with the same name when added.
            <para/>
            This is useful for loading in options
            that aren't immediately registered, or loaded progressively over time.
            </summary>
            <param name="option">The option to add.</param>
            <returns>Whether the option was successfully added.</returns>
        </member>
        <member name="T:InDoOut_Core.Options.Option`1">
            <summary>
            An option that can be modified by the user.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.Option`1.Visible">
            <summary>
            Whether this option is visible to the user or not.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.Option`1.Description">
            <summary>
            A description of what the option changes in more detail.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.Option`1.Name">
            <summary>
            The name of the option.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.Option`1.Value">
            <summary>
            The current value of the option.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Options.Option`1.#ctor(System.String,System.String,`0)">
            <summary>
            Creates a basic option with a name and optional description.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="description">A more detailed description of what the option is for.</param>
            <param name="defaultValue">The default value of the option before a user changes it.</param>
        </member>
        <member name="M:InDoOut_Core.Options.Option`1.Equals(System.Object)">
            <summary>
            Checks for eqaulity with another object. If the other object is of type <see cref="T:InDoOut_Core.Options.IOption"/>
            it will compare the name.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>Whether the objects are equal.</returns>
        </member>
        <member name="M:InDoOut_Core.Options.Option`1.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>The object hash.</returns>
        </member>
        <member name="M:InDoOut_Core.Options.Option`1.ToString">
            <summary>
            Gets the string representation of this option.
            </summary>
            <returns>The string representation of this option.</returns>
        </member>
        <member name="T:InDoOut_Core.Options.OptionHolder">
            <summary>
            A container for stored options.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.OptionHolder.Options">
            <summary>
            All options currently registered with the holder.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Options.OptionHolder.RegisterOption(InDoOut_Core.Options.IOption,System.Boolean)">
            <summary>
            Registers an option with the holder.
            </summary>
            <param name="option">The option to register.</param>
            <param name="setFromUnregisteredOptions">Allows the option value to be set from
            unregistered options if the names match. See <seealso cref="M:InDoOut_Core.Options.OptionHolder.AddUnregisteredOption(InDoOut_Core.Options.IOption)"/>
            for more on unregistered options.</param>
            <returns>Whether the option was successfully registed.</returns>
        </member>
        <member name="M:InDoOut_Core.Options.OptionHolder.DeregisterOption(InDoOut_Core.Options.IOption)">
            <summary>
            Deregisters an option from the holder.
            </summary>
            <param name="option">The option to deregister.</param>
            <returns>Whether the option was deregistered successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Options.OptionHolder.AddUnregisteredOption(InDoOut_Core.Options.IOption)">
            <summary>
            Adds an option that isn't registered, but will set the value of a registered 
            option with the same name when added.
            <para/>
            This is useful for loading in options
            that aren't immediately registered, or loaded progressively over time.
            </summary>
            <param name="option">The option to add.</param>
            <returns>Whether the option was successfully added.</returns>
        </member>
        <member name="T:InDoOut_Core.Options.Types.CheckableOption">
            <summary>
            An option that can be checked or unchecked.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Options.Types.CheckableOption.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a basic checkable option with name, description and default value.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="description">A more detailed description of what the option does.</param>
            <param name="defaultValue">The default value of the option before the user interacts with it.</param>
        </member>
        <member name="T:InDoOut_Core.Options.Types.MultiChoiceOption">
            <summary>
            A multi-choice option where a user can select a value from a list of possible values.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.Types.MultiChoiceOption.Items">
            <summary>
            The available items to select from in the option.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Options.Types.MultiChoiceOption.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Creates a basic multi choice option with a name, description, default value and list of items.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="description">A more detailed description of the option.</param>
            <param name="defaultValue">The default value of the option.</param>
            <param name="items">The available items to be selected from.</param>
        </member>
        <member name="T:InDoOut_Core.Options.Types.RangedDoubleOption">
            <summary>
            A ranged option that stores a double.
            See <see cref="T:InDoOut_Core.Options.Types.RangedOption`1"/> for further info.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Options.Types.RangedDoubleOption.#ctor(System.String,System.Double,System.Double,System.String,System.Double)">
            <summary>
            Creates a basic ranged option that can store a double value, with an inclusive minimum and maximum value.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="minimumValue">The inclusive minimum allowed value for the option.</param>
            <param name="maximumValue">The inclusive maximum allowed value for the option.</param>
            <param name="description">A more detailed description of what the option is for.</param>
            <param name="defaultValue">The default option value before it is set by the user.</param>
        </member>
        <member name="M:InDoOut_Core.Options.Types.RangedDoubleOption.ValueWithinBounds">
            <summary>
            Returns whether the option value is within the minimum and maximum values (inclusive).
            </summary>
            <returns>Whether the option value is within the minimum and maximum values (inclusive).</returns>
        </member>
        <member name="T:InDoOut_Core.Options.Types.RangedIntOption">
            <summary>
            A ranged option that stores an integer.
            See <see cref="T:InDoOut_Core.Options.Types.RangedOption`1"/> for further info.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Options.Types.RangedIntOption.#ctor(System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a basic ranged option that can store an integer value, with an inclusive minimum and maximum value.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="minimumValue">The inclusive minimum allowed value for the option.</param>
            <param name="maximumValue">The inclusive maximum allowed value for the option.</param>
            <param name="description">A more detailed description of what the option is for.</param>
            <param name="defaultValue">The default option value before it is set by the user.</param>
        </member>
        <member name="M:InDoOut_Core.Options.Types.RangedIntOption.ValueWithinBounds">
            <summary>
            Returns whether the option value is within the minimum and maximum values (inclusive).
            </summary>
            <returns>Whether the option value is within the minimum and maximum values (inclusive).</returns>
        </member>
        <member name="T:InDoOut_Core.Options.Types.RangedOption`1">
            <summary>
            An abstract ranged option. These store a minimum and maximum possible value for the option and only
            allow the user to select a value between these values.
            </summary>
            <typeparam name="RangedType">The type to store.</typeparam>
        </member>
        <member name="P:InDoOut_Core.Options.Types.RangedOption`1.MinimumValue">
            <summary>
            The inclusive minimum value allowed for the option.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Options.Types.RangedOption`1.MaximumValue">
            <summary>
            The inclusive maximum value allowed for the option.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Options.Types.RangedOption`1.#ctor(System.String,`0,`0,System.String,`0)">
            <summary>
            Creates a basic ranged option with a name, minimum value, maximum values, description and default value.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="minimumValue">The inclusive minimum value allowed for the option.</param>
            <param name="maximumValue">The inclusive maximum value allowed for the option.</param>
            <param name="description">A more detailed description of what the option is for.</param>
            <param name="defaultValue">The default value given before the user sets it.</param>
        </member>
        <member name="M:InDoOut_Core.Options.Types.RangedOption`1.ValueWithinBounds">
            <summary>
            Checks whether the option value is within the minimum and maximum values.
            </summary>
            <returns>Whether the option value is within the minimum and maximum values.</returns>
        </member>
        <member name="T:InDoOut_Core.Options.Types.StringOption">
            <summary>
            A string based option where a user can enter any string they want.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Options.Types.StringOption.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a basic string option that allows a user to enter any string.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="description">The description of the option.</param>
            <param name="defaultValue">The default value of the option.</param>
        </member>
        <member name="T:InDoOut_Core.Plugins.IPlugin">
            <summary>
            Represents a plugin that is recognised by the application and loaded in automatically.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Plugins.IPlugin.Valid">
            <summary>
            Whether the plugin is valid and can be loaded.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Plugins.IPlugin.Name">
            <summary>
            The name of the plugin. Visible to the user.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Plugins.IPlugin.SafeName">
            <summary>
            The safe version of <see cref="P:InDoOut_Core.Plugins.IPlugin.Name"/>. This has exception handling in the case of an invalid name.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Plugins.IPlugin.Description">
            <summary>
            A description of what this plugin contains or does. Visible to the user.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Plugins.IPlugin.SafeDescription">
            <summary>
            The safe version of <see cref="P:InDoOut_Core.Plugins.IPlugin.Description"/>. This has exception handling in the case of an invalid description.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Plugins.IPlugin.Author">
            <summary>
            The author(s) of this plugin. Visible to the user.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Plugins.IPlugin.SafeAuthor">
            <summary>
            The safe version of <see cref="P:InDoOut_Core.Plugins.IPlugin.Author"/>. This has exception handling in the case of an invalid author.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Plugins.IPlugin.OptionHolder">
            <summary>
            The option storage for this plugin.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Reporting.FailureReport">
            <summary>
            A failure report containing details about a failure that
            has occurred.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Reporting.FailureReport.Critical">
            <summary>
            Whether this failure is a critical failure and could cause issues if
            continued. If false, this is a recoverable state and can be continued.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Reporting.FailureReport.Id">
            <summary>
            The ID of the failure.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Reporting.FailureReport.Summary">
            <summary>
            A summary of the failure.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Reporting.FailureReport.DetailedReport">
            <summary>
            Detailed information (if available) aobut the failure that
            has occurred.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Reporting.FailureReport.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Constructs a basic failure report.
            </summary>
            <param name="id">The ID of the failure.</param>
            <param name="summary">A summary of the failure that has occurred.</param>
            <param name="detailedReport">An optional detailed report giving more information about the failure.</param>
            <param name="critical">Whether or not this failure is critical, and continuing after this could cause problems.</param>
        </member>
        <member name="M:InDoOut_Core.Reporting.FailureReport.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Constructs a basic failure report.
            </summary>
            <param name="id">The ID of the failure.</param>
            <param name="summary">A summary of the failure that has occurred.</param>
            <param name="critical">Whether or not this failure is critical, and continuing after this could cause problems.</param>
        </member>
        <member name="M:InDoOut_Core.Reporting.FailureReport.ToString">
            <summary>
            Converts the failure report to a string representation.
            </summary>
            <returns>A string representation of a failure report.</returns>
        </member>
        <member name="T:InDoOut_Core.Reporting.IFailureReport">
            <summary>
            Represents a failure report that contains details on a failure
            that has occurred.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Reporting.IFailureReport.Critical">
            <summary>
            Whether this failure is a critical failure and could cause issues if
            continued. If false, this is a recoverable state and can be continued.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Reporting.IFailureReport.Id">
            <summary>
            The ID of the failure.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Reporting.IFailureReport.Summary">
            <summary>
            A summary of the failure.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Reporting.IFailureReport.DetailedReport">
            <summary>
            Detailed information (if available) about the failure that has
            occurred.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Threading.Safety.TryGet">
            <summary>
            A collection of methods to safely get values.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Threading.Safety.TryGet.ValueOrDefault``1(System.Func{``0},``0)">
            <summary>
            Gets a value from a function result unless an exception is thrown, where it returns
            a default value.
            </summary>
            <typeparam name="T">The value type that is returned.</typeparam>
            <param name="function">The function to process.</param>
            <param name="defaultValue">The default value to return on failure.</param>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Core.Threading.Safety.TryGet.ExecuteOrFail(System.Action)">
            <summary>
            Attempts to execute a given <see cref="T:System.Action"/> <paramref name="action"/>. If it succeeds
            without throwing an error it returns true, otherwise false.
            </summary>
            <param name="action">The action to run.</param>
            <returns>Whether the action succeded without exception.</returns>
        </member>
        <member name="T:InDoOut_Core.Variables.IVariable">
            <summary>
            Represents an individual variable. Variables have names and values which store state
            over multiple functions.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Variables.IVariable.Valid">
            <summary>
            Returns whether the variable is valid.
            </summary>
        </member>
        <member name="T:InDoOut_Core.Variables.IVariableStore">
            <summary>
            Represents global storage for <see cref="T:InDoOut_Core.Variables.IVariable"/>s.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.VariableExists(System.String)">
            <summary>
            Returns whether a variable name <paramref name="name"/> exists as a
            variable in this storage.
            </summary>
            <param name="name">The name of the variable to check.</param>
            <returns>Whether the given variable name exists.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.SetVariable(System.String,System.String)">
            <summary>
            Sets or creates a variable from the given name <paramref name="name"/> and sets it to the
            value <paramref name="value"/>.
            </summary>
            <param name="name">The name of the variable to set.</param>
            <param name="value">The value to set the variable to.</param>
            <returns>Whether the variable was set successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.SetVariable(InDoOut_Core.Variables.IVariable)">
            <summary>
            Sets or creates a variable from the given <paramref name="variable"/>.
            </summary>
            <param name="variable">The variable to set.</param>
            <returns>Whether the variable was set successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.GetVariableValue(System.String,System.String)">
            <summary>
            Returns the string value of the variable name <paramref name="name"/>, and returns
            <paramref name="defaultValue"/> if it doesn't exist.
            </summary>
            <param name="name">The name of the variable to get the value for.</param>
            <param name="defaultValue">The value to return if the variable doesn't exist.</param>
            <returns>The string value of the variable.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.GetVariable(System.String)">
            <summary>
            Returns an <see cref="T:InDoOut_Core.Variables.IVariable"/> that matches the name given by <paramref name="name"/>.
            </summary>
            <param name="name">The name of the variable to find.</param>
            <returns>The variable found from <paramref name="name"/>, or null if not found.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.IVariableStore.GetVariableValueAs``1(System.String,``0)">
            <summary>
            Returns a converted value of type <typeparamref name="T"/> in the variable found from <paramref name="name"/>.
            If that conversion fails it returns <paramref name="defaultValue"/> instead.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="name">The name of the variable to find.</param>
            <param name="defaultValue">The value to return on failure.</param>
            <returns>The converted value of the variable, or <paramref name="defaultValue"/> on failure.</returns>
        </member>
        <member name="T:InDoOut_Core.Variables.Variable">
            <summary>
            An individual variable that holds a value and a name.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Variables.Variable.Name">
            <summary>
            The variable name.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Variables.Variable.Valid">
            <summary>
            Returns whether the variable is valid or not.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Variables.Variable.#ctor(System.String,System.String)">
            <summary>
            Creates a new variable with the given name <paramref name="name"/>.
            </summary>
            <param name="name">The name to associate with the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="M:InDoOut_Core.Variables.Variable.Equals(System.Object,System.Boolean)">
            <summary>
            Checks equality on the variable. Variables are case insensitive.
            </summary>
            <param name="obj">The object to compare againt.</param>
            <param name="includeValues">Whether or not to include the value of the variable in the comparison.</param>
            <returns>Whether the variable is equal to the given object <paramref name="obj"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.Variable.Equals(System.Object)">
            <summary>
            Checks equality on the variable. Variables are case insensitive.
            </summary>
            <param name="obj">The object to compare againt.</param>
            <returns>Whether the variable is equal to the given object <paramref name="obj"/>.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.Variable.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>The hash code for this variable.</returns>
        </member>
        <member name="T:InDoOut_Core.Variables.VariableStore">
            <summary>
            Storage for multiple <see cref="T:InDoOut_Core.Variables.IVariable"/>s. Allows for searching through and returning values
            of variables within.
            </summary>
        </member>
        <member name="P:InDoOut_Core.Variables.VariableStore.Variables">
            <summary>
            All variables currently in storage.
            </summary>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.GetVariable(System.String)">
            <summary>
            Returns an <see cref="T:InDoOut_Core.Variables.IVariable"/> that matches the name given by <paramref name="name"/>.
            </summary>
            <param name="name">The name of the variable to find.</param>
            <returns>The variable found from <paramref name="name"/>, or null if not found.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.GetVariableValue(System.String,System.String)">
            <summary>
            Returns the string value of the variable name <paramref name="name"/>, and returns
            <paramref name="defaultValue"/> if it doesn't exist.
            </summary>
            <param name="name">The name of the variable to get the value for.</param>
            <param name="defaultValue">The value to return if the variable doesn't exist.</param>
            <returns>The string value of the variable.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.GetVariableValueAs``1(System.String,``0)">
            <summary>
            Returns a converted value of type <typeparamref name="T"/> in the variable found from <paramref name="name"/>.
            If that conversion fails it returns <paramref name="defaultValue"/> instead.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="name">The name of the variable to find.</param>
            <param name="defaultValue">The value to return on failure.</param>
            <returns>The converted value of the variable, or <paramref name="defaultValue"/> on failure.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.SetVariable(System.String,System.String)">
            <summary>
            Sets or creates a variable from the given name <paramref name="name"/> and sets it to the
            value <paramref name="value"/>.
            </summary>
            <param name="name">The name of the variable to set.</param>
            <param name="value">The value to set the variable to.</param>
            <returns>Whether the variable was set successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.SetVariable(InDoOut_Core.Variables.IVariable)">
            <summary>
            Sets or creates a variable from the given <paramref name="variable"/>.
            </summary>
            <param name="variable">The variable to set.</param>
            <returns>Whether the variable was set successfully.</returns>
        </member>
        <member name="M:InDoOut_Core.Variables.VariableStore.VariableExists(System.String)">
            <summary>
            Returns whether a variable name <paramref name="name"/> exists as a
            variable in this storage.
            </summary>
            <param name="name">The name of the variable to check.</param>
            <returns>Whether the given variable name exists.</returns>
        </member>
    </members>
</doc>
