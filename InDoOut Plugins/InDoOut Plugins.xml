<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InDoOut Plugins</name>
    </assembly>
    <members>
        <member name="T:InDoOut_Plugins.Containers.IPluginContainer">
            <summary>
            Represents a container that contains metadata for a standard <see cref="T:InDoOut_Core.Plugins.IPlugin"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Containers.IPluginContainer.Valid">
            <summary>
            The container contains a valid plugin.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Containers.IPluginContainer.Plugin">
            <summary>
            The plugin that this container houses.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Containers.IPluginContainer.FunctionTypes">
            <summary>
            The functions that this plugin makes visible.
            </summary>
        </member>
        <member name="M:InDoOut_Plugins.Containers.IPluginContainer.Initialise">
            <summary>
            Initialises the plugin container, which populates the metadata.
            </summary>
            <returns>Whether or not the container could be initialised.</returns>
        </member>
        <member name="T:InDoOut_Plugins.Containers.PluginContainer">
            <summary>
            A container that contains metadata for a standard <see cref="T:InDoOut_Core.Plugins.IPlugin"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Containers.PluginContainer.Valid">
            <summary>
            Whether or not the container has a valid plugin.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Containers.PluginContainer.Plugin">
            <summary>
            The plugin this container houses.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Containers.PluginContainer.FunctionTypes">
            <summary>
            The functions the plugin makes available.
            </summary>
        </member>
        <member name="M:InDoOut_Plugins.Containers.PluginContainer.#ctor">
            <summary>
            Creates a standard plugin container with an empty plugin.
            </summary>
        </member>
        <member name="M:InDoOut_Plugins.Containers.PluginContainer.#ctor(InDoOut_Core.Plugins.IPlugin)">
            <summary>
            Creates a plugin container to house the given <paramref name="plugin"/>.
            </summary>
            <param name="plugin">The plugin this container belongs to.</param>
        </member>
        <member name="M:InDoOut_Plugins.Containers.PluginContainer.Initialise">
            <summary>
            Initialises the metadata for the stored plugin.
            </summary>
            <returns>Whether or not the initialisation was a success.</returns>
        </member>
        <member name="T:InDoOut_Plugins.Core.Plugin">
            <summary>
            Allows the application to reference the class as a plugin, which
            enables it to load in the custom functions and other extensions 
            automatically.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Core.Plugin.Valid">
            <summary>
            Whether this plugin is valid and can be loaded.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Core.Plugin.SafeName">
            <summary>
            The safe version of <see cref="P:InDoOut_Plugins.Core.Plugin.Name"/>. This has exception handling in the case of an invalid name.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Core.Plugin.SafeDescription">
            <summary>
            The safe version of <see cref="P:InDoOut_Plugins.Core.Plugin.Description"/>. This has exception handling in the case of an invalid description.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Core.Plugin.SafeAuthor">
            <summary>
            The safe version of <see cref="P:InDoOut_Plugins.Core.Plugin.Author"/>. This has exception handling in the case of an invalid author.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Core.Plugin.Name">
            <summary>
            The name of the plugin. Visible to the user.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Core.Plugin.Description">
            <summary>
            A description of what this plugin contains or does. Visible to the user.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Core.Plugin.Author">
            <summary>
            The author(s) of this plugin. Visible to the user.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Core.Plugin.OptionHolder">
            <summary>
            An option holder that stores options for this plugin.
            </summary>
        </member>
        <member name="T:InDoOut_Plugins.Loaders.ILoadedPlugins">
            <summary>
            Represents a storage area for loaded <see cref="T:InDoOut_Plugins.Containers.IPluginContainer"/>s.
            </summary>
        </member>
        <member name="E:InDoOut_Plugins.Loaders.ILoadedPlugins.PluginsChanged">
            <summary>
            Fired when a plugin has changed.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Loaders.ILoadedPlugins.Plugins">
            <summary>
            All currently loaded plugins.
            </summary>
        </member>
        <member name="T:InDoOut_Plugins.Loaders.IPluginDirectoryLoader">
            <summary>
            Represents a loader that is capable of loading plugins from a directory location.
            </summary>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.IPluginDirectoryLoader.LoadPlugins">
            <summary>
            Loads all plugins from a standard directory location.
            </summary>
            <returns>A list of plugins that have been loaded.</returns>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.IPluginDirectoryLoader.LoadPlugins(System.String)">
            <summary>
            Loads all plugins from a given directory location.
            </summary>
            <param name="directory">The directory to load plugins from.</param>
            <returns>A list of loaded plugins.</returns>
        </member>
        <member name="T:InDoOut_Plugins.Loaders.IPluginLoader">
            <summary>
            Represents a loader that can load <see cref="T:InDoOut_Plugins.Containers.IPluginContainer"/>s.
            </summary>
        </member>
        <member name="E:InDoOut_Plugins.Loaders.IPluginLoader.PluginLoading">
            <summary>
            Triggered when a plugin has begun loading.
            </summary>
        </member>
        <member name="E:InDoOut_Plugins.Loaders.IPluginLoader.PluginLoadSuccess">
            <summary>
            Triggered when a plugin has successfully loaded.
            </summary>
        </member>
        <member name="E:InDoOut_Plugins.Loaders.IPluginLoader.PluginLoadFail">
            <summary>
            Triggered when a plugin has failed to load.
            </summary>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.IPluginLoader.LoadPlugin(System.String)">
            <summary>
            Loads a plugin from a given assembly path.
            </summary>
            <param name="path">The path to the assembly to be loaded.</param>
            <returns>A <see cref="T:InDoOut_Plugins.Containers.IPluginContainer"/>, if valid. Returns null otherwise.</returns>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.IPluginLoader.LoadPlugin(System.Reflection.Assembly)">
            <summary>
            Loads a plugin from a given assembly.
            </summary>
            <param name="assembly">The assembly to load.</param>
            <returns>A <see cref="T:InDoOut_Plugins.Containers.IPluginContainer"/>, if valid. Returns null otherwise.</returns>
        </member>
        <member name="T:InDoOut_Plugins.Loaders.LoadedPlugins">
            <summary>
            A list of currently loaded plugins.
            </summary>
        </member>
        <member name="E:InDoOut_Plugins.Loaders.LoadedPlugins.PluginsChanged">
            <summary>
            An event that fires when plugins have changed, either by loading or unloading.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Loaders.LoadedPlugins.Plugins">
            <summary>
            The currently loaded plugins.
            </summary>
        </member>
        <member name="T:InDoOut_Plugins.Loaders.PluginDirectoryLoader">
            <summary>
            A plugin loader that can load from a directory location.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Loaders.PluginDirectoryLoader.PluginExtension">
            <summary>
            The extension to look for plugins.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Loaders.PluginDirectoryLoader.PluginLoader">
            <summary>
            The current loader for loading in plugins from the directory.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Loaders.PluginDirectoryLoader.StandardLocations">
            <summary>
            The current standard locations to load in plugins.
            </summary>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.PluginDirectoryLoader.#ctor(InDoOut_Plugins.Loaders.IPluginLoader,InDoOut_Executable_Core.Location.IStandardLocations)">
            <summary>
            Initialises a directory plugin loader given an individual plugin loader and standard locations to load plugins from.
            </summary>
            <param name="pluginLoader">The loader to handle loading plugins.</param>
            <param name="standardLocations">The standard locations to load plugins from.</param>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.PluginDirectoryLoader.LoadPlugins">
            <summary>
            Loads plugins from the given standard locations directory.
            </summary>
            <returns>A list of loaded plugins.</returns>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.PluginDirectoryLoader.LoadPlugins(System.String)">
            <summary>
            Loads plugins from a given directory.
            </summary>
            <param name="directory">The directory path to load plugins from.</param>
            <returns>A list of loaded plugins.</returns>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.PluginDirectoryLoader.FindLibraries(System.String,System.String)">
            <summary>
            Finds all libraries with a given extension in the specified directory.
            </summary>
            <param name="directory">The directory to search in.</param>
            <param name="extension">The extension to search for.</param>
            <returns></returns>
        </member>
        <member name="T:InDoOut_Plugins.Loaders.PluginLoader">
            <summary>
            Loads plugins as <see cref="T:InDoOut_Plugins.Containers.IPluginContainer"/>s.
            </summary>
        </member>
        <member name="E:InDoOut_Plugins.Loaders.PluginLoader.PluginLoading">
            <summary>
            Triggered when a plugin has begun loading.
            </summary>
        </member>
        <member name="E:InDoOut_Plugins.Loaders.PluginLoader.PluginLoadSuccess">
            <summary>
            Triggered when a plugin has successfully loaded.
            </summary>
        </member>
        <member name="E:InDoOut_Plugins.Loaders.PluginLoader.PluginLoadFail">
            <summary>
            Triggered when a plugin has failed to load.
            </summary>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.PluginLoader.LoadPlugin(System.String)">
            <summary>
            Loads a plugin from a given assembly path.
            </summary>
            <param name="path">The path to the assembly to be loaded.</param>
            <returns>A <see cref="T:InDoOut_Plugins.Containers.IPluginContainer"/>, if valid. Returns null otherwise.</returns>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.PluginLoader.LoadPlugin(System.Reflection.Assembly)">
            <summary>
            Loads a plugin from a given assembly.
            </summary>
            <param name="assembly">The assembly to load.</param>
            <returns>A <see cref="T:InDoOut_Plugins.Containers.IPluginContainer"/>, if valid. Returns null otherwise.</returns>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.PluginLoader.CreateContainer(InDoOut_Core.Plugins.IPlugin)">
            <summary>
            Creates a container for a given plugin.
            </summary>
            <param name="plugin">The plugin to containerise.</param>
            <returns>A plugin container for the plugin, if valid. Otherwise null.</returns>
        </member>
        <member name="T:InDoOut_Plugins.Loaders.PluginLoadEventArgs">
            <summary>
            Event arguments for a plugin load event.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Loaders.PluginLoadEventArgs.Path">
            <summary>
            The path to the currently loading plugin.
            </summary>
        </member>
        <member name="P:InDoOut_Plugins.Loaders.PluginLoadEventArgs.PluginLoader">
            <summary>
            The plugin loader that is currently loading the plugin.
            </summary>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.PluginLoadEventArgs.#ctor(InDoOut_Plugins.Loaders.IPluginLoader,System.String)">
            <summary>
            Creates event args given a <see cref="T:InDoOut_Plugins.Loaders.IPluginLoader"/> and a path to a plugin.
            </summary>
            <param name="loader">The loader that is currently loading the plugin.</param>
            <param name="path">The path to the plugin that is currently loading.</param>
        </member>
        <member name="M:InDoOut_Plugins.Loaders.PluginLoadEventArgs.#ctor(InDoOut_Plugins.Loaders.IPluginLoader,System.Reflection.Assembly)">
            <summary>
            Creates event args given a <see cref="T:InDoOut_Plugins.Loaders.IPluginLoader"/> and an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="loader">The loader that is currently loading the plugin.</param>
            <param name="assembly">The assembly that is currently being loaded.</param>
        </member>
    </members>
</doc>
