<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InDoOut Json Storage</name>
    </assembly>
    <members>
        <member name="T:InDoOut_Json_Storage.GenericJsonStorer">
            <summary>
            A generic class for storing and loading JSON data to the disk.
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.GenericJsonStorer.Save``1(``0,System.String)">
            <summary>
            Saves <typeparamref name="JsonType"/> to the given <paramref name="path"/>.
            </summary>
            <param name="jsonType">The JSON to save.</param>
            <param name="path">The path to save to.</param>
            <returns>Whether or not the JSON data could be saved to the path.</returns>
        </member>
        <member name="M:InDoOut_Json_Storage.GenericJsonStorer.Load``1(System.String)">
            <summary>
            Loads JSON shell data as type <typeparamref name="JsonType"/> from the given <paramref name="path"/>.
            </summary>
            <returns>JSON data from the path, or null if failed.</returns>
        </member>
        <member name="T:InDoOut_Json_Storage.JsonConnection">
            <summary>
            Represents a raw JSON connection between two functions.
            </summary>
        </member>
        <member name="T:InDoOut_Json_Storage.JsonConnection.ConnectionType">
            <summary>
            The type of connection this represents.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonConnection.ConnectionType.Unknown">
            <summary>
            An invalid, unknown connection.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonConnection.ConnectionType.InputOutput">
            <summary>
            A connection that consists of <see cref="T:InDoOut_Core.Entities.Functions.IInput"/> and <see cref="T:InDoOut_Core.Entities.Functions.IOutput"/>.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonConnection.ConnectionType.PropertyResult">
            <summary>
            A connection that consists of <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/> and <see cref="T:InDoOut_Core.Entities.Functions.IResult"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonConnection.TypeOfConnection">
            <summary>
            The type of connection this represents.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonConnection.OutputName">
            <summary>
            The name of the output that the connection originates from.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonConnection.InputName">
            <summary>
            The name of the input that the connection connects to.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonConnection.StartFunctionId">
            <summary>
            The ID of the function that the connection is connected from.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonConnection.EndFunctionId">
            <summary>
            The ID of the function that the connection is connected to.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonConnection.InputMetadata">
            <summary>
            The metadata applied to the input.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonConnection.OutputMetadata">
            <summary>
            The  metadata applied to the output.
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonConnection.CreateFromFunction(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Creates a <see cref="T:InDoOut_Json_Storage.JsonFunction"/> shell for a given <paramref name="function"/>.
            </summary>
            <param name="function">The function to construct a JSON shell for.</param>
            <returns>A created JSON shell, or null if failed.</returns>
        </member>
        <member name="T:InDoOut_Json_Storage.JsonFunction">
            <summary>
            Represents a JSON shell for a <see cref="T:InDoOut_Core.Entities.Functions.IFunction"/>
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonFunction.Id">
            <summary>
            Function Id
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonFunction.FunctionClass">
            <summary>
            Function associated class
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonFunction.Metadata">
            <summary>
            Function metadata
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonFunction.CreateFromFunction(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Creates a <see cref="T:InDoOut_Json_Storage.JsonFunction"/> shell for a given <paramref name="function"/>.
            </summary>
            <param name="function">The function to construct a JSON shell for.</param>
            <returns>A created JSON shell, or null if failed.</returns>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonFunction.Set(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Sets the data in a given <paramref name="function"/> from the stored data.
            </summary>
            <param name="function">The function to set.</param>
            <returns>Whether the data was set successfully.</returns>
        </member>
        <member name="T:InDoOut_Json_Storage.JsonOption">
            <summary>
            Represents a basic JSON shell for an <see cref="T:InDoOut_Core.Options.IOption"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonOption.Value">
            <summary>
            The property value.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonOption.Name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonOption.CreateFromOption(InDoOut_Core.Options.IOption)">
            <summary>
            Creates a JSON representation of an <see cref="T:InDoOut_Core.Options.IOption"/> for storage.
            </summary>
            <param name="option">The option to store.</param>
            <returns>A JSON representation of the given <paramref name="option"/>.</returns>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonOption.Set(InDoOut_Core.Options.IOption,System.Boolean)">
            <summary>
            Sets a given <paramref name="option"/> to the value in this <see cref="T:InDoOut_Json_Storage.JsonOption"/>. Fails if
            the names are differnent and <paramref name="failIfNameDifferent"/> is true. Set to false to set
            the value regardless of the name matching.
            </summary>
            <param name="option">The option to set the value of.</param>
            <param name="failIfNameDifferent">Returns false if this is true and name of the <paramref name="option"/> and <see cref="P:InDoOut_Json_Storage.JsonOption.Name"/> are different.</param>
            <returns>Whether or not the <see cref="P:InDoOut_Json_Storage.JsonOption.Value"/> was applied to the <paramref name="option"/>.</returns>
        </member>
        <member name="T:InDoOut_Json_Storage.JsonOptions">
            <summary>
            Represents a basic JSON shell for a list of <see cref="T:InDoOut_Core.Options.IOption"/>
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonOptions.CreateFromList(InDoOut_Core.Options.IOptionHolder)">
            <summary>
            Creates a JSON container for a list of options for storage.
            </summary>
            <param name="optionHolder">The options to create a container for.</param>
            <returns>A container for storing options.</returns>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonOptions.SetListValues(InDoOut_Core.Options.IOptionHolder)">
            <summary>
            Sets the values in a list of options to the stored values.
            <para />
            Note that values will only get set on options with matching names in the stored
            options.
            </summary>
            <param name="optionHolder">A list of options to apply values to.</param>
            <returns>Whether or not all options were set correctly.</returns>
        </member>
        <member name="T:InDoOut_Json_Storage.JsonProgram">
            <summary>
            Represents a basic JSON shell for an <see cref="T:InDoOut_Core.Entities.Programs.IProgram"/>.
            </summary>
        </member>
        <member name="T:InDoOut_Json_Storage.JsonProgram.FailureIds">
            <summary>
            A list of failure ids that could occur.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonProgram.FailureIds.InvalidResources">
            <summary>
            Resources required are not available
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonProgram.FailureIds.FailedToCreateFunction">
            <summary>
            A function could not be created.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonProgram.FailureIds.FunctionNotFound">
            <summary>
            A function was not found.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonProgram.FailureIds.InvalidFunction">
            <summary>
            A function was found, but invalid.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonProgram.FailureIds.InvalidProperty">
            <summary>
            A property was not valid.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonProgram.FailureIds.InvalidConnection">
            <summary>
            A connection was not valid.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonProgram.FailureIds.UnknownConnectionType">
            <summary>
            The connection type given was unknown.
            </summary>
        </member>
        <member name="F:InDoOut_Json_Storage.JsonProgram.FailureIds.ConnectionFailed">
            <summary>
            A connection could not be made.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonProgram.Version">
            <summary>
            The version of the program saved.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonProgram.Id">
            <summary>
            Program Id.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonProgram.Functions">
            <summary>
            Program functions.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonProgram.Connections">
            <summary>
            Program, function connections.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonProgram.PropertyValues">
            <summary>
            Values for function properties.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonProgram.Metadata">
            <summary>
            Program metadata.
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonProgram.CreateFromProgram(InDoOut_Core.Entities.Programs.IProgram)">
            <summary>
            Creates a <see cref="T:InDoOut_Json_Storage.JsonProgram"/> shell for a given <paramref name="program"/>.
            </summary>
            <param name="program">The program to construct a JSON shell for.</param>
            <returns>A created JSON shell, or null if failed.</returns>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonProgram.Set(InDoOut_Core.Entities.Programs.IProgram,InDoOut_Core.Functions.IFunctionBuilder,InDoOut_Plugins.Loaders.ILoadedPlugins)">
            <summary>
            Sets the data in a given <paramref name="program"/> from the stored data.
            </summary>
            <param name="program">The program to set.</param>
            <param name="builder">The function builder to generate saved functions.</param>
            <param name="loadedPlugins">The currently loaded plugins to search through.</param>
            <returns>Whether the data was set successfully.</returns>
        </member>
        <member name="T:InDoOut_Json_Storage.JsonPropertyValue">
            <summary>
            Represents a JSON shell for an <see cref="T:InDoOut_Core.Entities.Functions.IProperty"/>.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonPropertyValue.Value">
            <summary>
            The property value.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonPropertyValue.Name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.JsonPropertyValue.Function">
            <summary>
            The associated function ID.
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonPropertyValue.CreateFromFunction(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Creates a list of <see cref="T:InDoOut_Json_Storage.JsonPropertyValue"/>s for a given <paramref name="function"/>.
            </summary>
            <param name="function">The function to generate <see cref="T:InDoOut_Json_Storage.JsonPropertyValue"/>s for.</param>
            <returns>A list of property values within the given function, or null if a null function has been passed.</returns>
        </member>
        <member name="M:InDoOut_Json_Storage.JsonPropertyValue.Set(InDoOut_Core.Entities.Functions.IFunction)">
            <summary>
            Sets a property with a name of <see cref="P:InDoOut_Json_Storage.JsonPropertyValue.Name"/> inside a given <paramref name="function"/> to the stored <see cref="P:InDoOut_Json_Storage.JsonPropertyValue.Value"/>.
            </summary>
            <param name="function">The function to set.</param>
            <returns>Whether the property was set.</returns>
        </member>
        <member name="T:InDoOut_Json_Storage.OptionsJsonStorer">
            <summary>
            Stores a set of options in the JSON format.
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.OptionsJsonStorer.#ctor">
            <summary>
            Creates a basic <see cref="T:InDoOut_Json_Storage.OptionsJsonStorer"/> without a path, which can be set later using
            <see cref="P:InDoOut_Executable_Core.Storage.OptionsStorer.FilePath"/>.
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.OptionsJsonStorer.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:InDoOut_Json_Storage.OptionsJsonStorer"/> with a <paramref name="filePath"/>.
            </summary>
            <param name="filePath">The path to the file that will be saved or loaded.</param>
        </member>
        <member name="P:InDoOut_Json_Storage.OptionsJsonStorer.FileExtension">
            <summary>
            The extension of the generated files.
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.OptionsJsonStorer.TryLoad(InDoOut_Core.Options.IOptionHolder,System.String)">
            <summary>
            Attempts to load option values into the given list of <paramref name="optionHolder"/> from the given
            <paramref name="path"/>.
            </summary>
            <param name="optionHolder">The options to load values into.</param>
            <param name="path">The location to load options from.</param>
            <returns></returns>
        </member>
        <member name="M:InDoOut_Json_Storage.OptionsJsonStorer.TrySave(InDoOut_Core.Options.IOptionHolder,System.String)">
            <summary>
            Attempts to save the given list of <paramref name="optionHolder"/> to the given <paramref name="path"/>
            on disk.
            </summary>
            <param name="optionHolder">The options to save.</param>
            <param name="path">The path to save the options to.</param>
            <returns></returns>
        </member>
        <member name="T:InDoOut_Json_Storage.ProgramJsonStorer">
            <summary>
            Stores a program in the JSON format.
            </summary>
        </member>
        <member name="P:InDoOut_Json_Storage.ProgramJsonStorer.FileExtension">
            <summary>
            The extension of the generated files.
            </summary>
        </member>
        <member name="M:InDoOut_Json_Storage.ProgramJsonStorer.#ctor(InDoOut_Core.Functions.IFunctionBuilder,InDoOut_Plugins.Loaders.ILoadedPlugins,System.String)">
            <summary>
            Creates an instance of the JSON storer.
            </summary>
            <param name="path">The path to save to and load from.</param>
            <param name="builder">A function builder that can load functions with the program.</param>
            <param name="loadedPlugins">Available plugins that can be loaded.</param>
        </member>
        <member name="M:InDoOut_Json_Storage.ProgramJsonStorer.TryLoad(InDoOut_Core.Entities.Programs.IProgram,System.String)">
            <summary>
            Loads a program from the JSON storage file at the given <paramref name="path"/>.
            </summary>
            <param name="program">The program to load data into.</param>
            <param name="path">The path to load from.</param>
            <returns>The loaded program, or null if invalid.</returns>
        </member>
        <member name="M:InDoOut_Json_Storage.ProgramJsonStorer.TrySave(InDoOut_Core.Entities.Programs.IProgram,System.String)">
            <summary>
            Saves a program to the given <paramref name="path"/>.
            </summary>
            <param name="program">The program to save.</param>
            <param name="path">The path to save to.</param>
            <returns>Whether or not the program could be saved to the path.</returns>
        </member>
    </members>
</doc>
